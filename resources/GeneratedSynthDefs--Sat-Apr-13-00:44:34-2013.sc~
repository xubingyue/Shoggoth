//////////////////////////////////////////////////////////////////////////////////////////////////////////
// GeneratedSynthDefs--Sat-Apr-13-00:44:34-2013
//////////////////////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////
// Vulcan.227
/////////////////////////////////////////////////////////

SynthDef.new("Vulcan.227", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVulcan2278, varVulcan2279, varVulcan22710, varVulcan22711, varVulcan22712;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = ScopeOut.ar(wave, varVulcan22711);
signal = WAmp.a);
modX = FoaFocusZ.ar(varVulcan2279, modX, BLowCut.ar(415.99897582267, wave * signal, gate=1, varVulcan2278), 0);
modY = MarkovSynth.ar(x=0, signal, PanAz.ar(157.58163860038, varVulcan22711, amp=0.25, env, wave, gate=1), z=0);
modZ = AnalyseEvents2.ar(Dfsm.a), modX, CombLP.ar(92.413877959671, 410.25886464545, wave, y=0, z=0, GaussClass.a), 0.99260750840253, 0), wave, island=0, SoftClipAmp4.ar(wave, wave, Delay1.ar(varVulcan22710, wave, 0), 0));
gateEnv = TwoPole.ar(PV_MagShift.a), Dust.ar(wave, 0.86512629326163, 0).exprange(1, SampleRate.ir);, wave, gateEnv, 0);
wave = JoshMultiChannelGrain.a);
varVulcan2278 = DbufTag.a);
varVulcan2279 = LFTri.ar(wave, 832.08299130361, wave, 0);
varVulcan22710 = LPF18.ar(wave, PV_BinShift.a).exprange(1, SampleRate.ir);, t_trig=0, bufnum=0);
varVulcan22711 = Dbrown.a);
varVulcan22712 = FoaPressZ.ar(varVulcan22711, gate=1, BBandStop.ar(wave, PeakEQ4.ar(y=0, wave, varVulcan22712, wave).exprange(1, SampleRate.ir);, MarkovSynth.ar(t_trig=0, wave, island=0, amp=0.25), 0.94070791567382, 0), 0);

signal = 2;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Vulcan.2271
/////////////////////////////////////////////////////////

SynthDef.new("Vulcan.2271", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVulcan2278, varVulcan2279, varVulcan22710, varVulcan22711, varVulcan22712;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Vulcan.2272
/////////////////////////////////////////////////////////

SynthDef.new("Vulcan.2272", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVulcan2278, varVulcan2279, varVulcan22710, varVulcan22711, varVulcan22712;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Vulcan.2273
/////////////////////////////////////////////////////////

SynthDef.new("Vulcan.2273", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVulcan2278, varVulcan2279, varVulcan22710, varVulcan22711, varVulcan22712;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Vulcan.2274
/////////////////////////////////////////////////////////

SynthDef.new("Vulcan.2274", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVulcan2278, varVulcan2279, varVulcan22710, varVulcan22711, varVulcan22712;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// HLLT.2783
/////////////////////////////////////////////////////////

SynthDef.new("HLLT.2783", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHLLT27838;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = PV_RectComb.a);
signal = FoaPushX.ar(448.25947491879, signal, 0.99998940443002, 0);
modX = FoaPressY.ar(wave, wave, 0.92170053779223, 0);
modY = ArrayMax.ar(signal);
modZ = LPCError.ar(x=0, gate=1, 0.29406818480202, 0);
gateEnv = GaussClass.a);
wave = TIRand.ar(Gbman2DC.ar(modZ, modZ, t_trig=0, varHLLT27838, 0.99533310605159, 0), bufnum=0, varHLLT27838);
varHLLT27838 = Unpack1FFT.a);

signal = 8;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// HLLT.27831
/////////////////////////////////////////////////////////

SynthDef.new("HLLT.27831", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHLLT27838;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// HLLT.27832
/////////////////////////////////////////////////////////

SynthDef.new("HLLT.27832", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHLLT27838;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// HLLT.27833
/////////////////////////////////////////////////////////

SynthDef.new("HLLT.27833", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHLLT27838;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// HLLT.27834
/////////////////////////////////////////////////////////

SynthDef.new("HLLT.27834", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHLLT27838;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sentinel.4
/////////////////////////////////////////////////////////

SynthDef.new("Sentinel.4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSentinel48, varSentinel49;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = Foa.a);
signal = LatoocarfianL.ar(StandardL.ar(InRange.ar(signal, amp=0.25, FhnTrig.ar(modZ, modY, x=0, wave, signal, wave, OscN.ar(gateEnv, varSentinel49 * signal, wave, SetBuf.a), 0), wave, gate=1, wave, 0)).exprange(1, SampleRate.ir);, x=0, PV_MagMinus.a), varSentinel48, 0.99994061282232, 0).exprange(1, SampleRate.ir);, gate=1, 123.04996489428, gateEnv, gateEnv, gateEnv, gate=1, 0.99940897501245, 0);
modX = WaveLoss.ar(gateEnv, modX, varSentinel48, t_trig=0, InFeedback.ar(y=0, wave), PV_MagGate.a));
modY = FBSineL.ar(wave * modX, y=0, amp=0.25, t_trig=0, island=0, varSentinel49, bufnum=0, BFEncode2.ar(wave, wave, signal, wave, varSentinel48, island=0), OSFold4.ar(modZ, bufnum=0, x=0));
modZ = Free.a);
gateEnv = FreeVerb2.ar(x=0, XLine.ar(x=0, modY, wave, Unpack1FFT.a), LFBrownNoise2.ar(modY, modX, wave, BBandStop.ar(wave, wave * wave, FFTSubbandFlux.a), 0.99993564726539, 0), 0), 17.661638743402), x=0, wave, modZ, 0.99699083943289, 0);
wave = BufGrain.ar(amp=0.25, x=0, varSentinel48, PV_MagScale.a), gate=1, DiskIn.ar(varSentinel49, wave, BufRd.ar(modZ, modX, 5.5799647167558, env, wave)), modX, 0);
varSentinel48 = PV_EvenBin.a);
varSentinel49 = Lag2UD.ar(28.986822763697, modX, Formlet.ar(modY, wave, FoaPressX.ar(island=0, wave, 0.99995871517368, 0), wave, GrayNoise.ar(env, 0), 0), 0.9713453515436, 0);

signal = 9;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sentinel.41
/////////////////////////////////////////////////////////

SynthDef.new("Sentinel.41", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSentinel48, varSentinel49;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sentinel.42
/////////////////////////////////////////////////////////

SynthDef.new("Sentinel.42", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSentinel48, varSentinel49;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sentinel.43
/////////////////////////////////////////////////////////

SynthDef.new("Sentinel.43", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSentinel48, varSentinel49;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sentinel.44
/////////////////////////////////////////////////////////

SynthDef.new("Sentinel.44", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSentinel48, varSentinel49;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// MPCe.284
/////////////////////////////////////////////////////////

SynthDef.new("MPCe.284", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varMPCe2848, varMPCe2849, varMPCe28410, varMPCe28411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = PV_BinBufRd.a);
signal = QuadL.ar(wave * wave, env, z=0, island=0, varMPCe28410, wave, 0);
modX = FoaAsymmetry.ar(Streson.ar(YigCliffordN.ar(FoaAsymmetry.ar(modY, signal, 0.99806767782591, 0).exprange(1, SampleRate.ir);, modZ, 66.361448261064, 146.77074369186, varMPCe2849, wave, Delay2.ar(varMPCe28410, Compander.ar(wave, t_trig=0, wave, wave, signal, varMPCe2848, Dfsm.a), wave, 0), 0), varMPCe28410, 0), t_trig=0, bufnum=0, 0.99998996421407, 0), y=0, wave, RedDPCMdecode.ar(PV_CommonMul.a)));
modY = SMS.ar(amp=0.25, island=0, varMPCe28411, z=0, varMPCe28411, varMPCe28411, x=0, gate=1, 607.5810690225, wave, LinCongN.ar(signal * wave, 1.7336229616097, varMPCe2849, modZ, gate=1, wave, MFCC.a)), 0.89219438845622, 0);
modZ = DetaBlockerBuf.a);
gateEnv = FFTSubbandPower.a);
wave = YigClifford3DC.ar(wave * wave, y=0, wave, t_trig=0, modX, amp=0.25, wave, y=0, 0.99982880770314, 0);
varMPCe2848 = MouseButton.a);
varMPCe2849 = Latch.ar(varMPCe28411, x=0);
varMPCe28410 = Onsets.a);
varMPCe28411 = JoshMultiChannelGrain.a);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// MPCe.2841
/////////////////////////////////////////////////////////

SynthDef.new("MPCe.2841", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varMPCe2848, varMPCe2849, varMPCe28410, varMPCe28411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// MPCe.2842
/////////////////////////////////////////////////////////

SynthDef.new("MPCe.2842", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varMPCe2848, varMPCe2849, varMPCe28410, varMPCe28411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// MPCe.2843
/////////////////////////////////////////////////////////

SynthDef.new("MPCe.2843", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varMPCe2848, varMPCe2849, varMPCe28410, varMPCe28411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// MPCe.2844
/////////////////////////////////////////////////////////

SynthDef.new("MPCe.2844", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varMPCe2848, varMPCe2849, varMPCe28410, varMPCe28411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// DVT.294
/////////////////////////////////////////////////////////

SynthDef.new("DVT.294", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDVT2948, varDVT2949, varDVT29410, varDVT29411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = JoshMultiChannelGrain.a);
signal = VOSIM.ar(varDVT2949, Latoocarfian2DL.ar(z=0, t_trig=0, x=0, wave, amp=0.25, wave, varDVT2948, wave, 0.7866550985296, 0).exprange(1, SampleRate.ir);, wave, 76.900891220707, BufSamples.a), BiPanB2.ar(gate=1, island=0, modZ, gate=1));
modX = RLPFD.ar(modY, 149.67129524939, wave, varDVT2948, FreqShift.ar(gate=1, ControlDur.a).exprange(1, SampleRate.ir);, bufnum=0, varDVT29411, 0), 0);
modY = PV_MagMulAdd.a);
modZ = StkMoog.ar(HyperTerrain.ar(wave, wave, wave, y=0, 0.99161420104457, 0).exprange(1, SampleRate.ir);, amp=0.25, varDVT2949, amp=0.25, modX, varDVT29411, wave, 0.99994319112253, 0);
gateEnv = B2UHJ.ar(gate=1, bufnum=0, 1.1742768143367);
wave = LTI.ar(amp=0.25, wave, varDVT29410, 0.99532085673763, 0);
varDVT2948 = FoaAsymmetry.ar(modX, Gbman2DN.ar(y=0, amp=0.25, 22.415092709864, SMS.ar(island=0, amp=0.25, wave, bufnum=0, island=0, LFGauss.ar(env, Henon2DL.ar(varDVT29410, signal, wave, 6.7992119613338, varDVT29410, varDVT29411, CoinGate.ar(z=0, wave), 0), modX, y=0, bufnum=0), wave, x=0, wave, wave, varDVT2948, BufDelayN.ar(t_trig=0, Unpack1FFT.a), 3358.4680014059, 0.99995437334476, 0), Drand.a)), wave, 0), 0.99995735718585, 0);
varDVT2949 = LinCongC.ar(wave * wave, modZ, varDVT29410, 4.4424404250968, modZ, 0.83653603621152, 0);
varDVT29410 = ChuaL.ar(modZ * varDVT2949, x=0, varDVT29411, NTube.ar(wave, env, varDVT29411, wave, wave, 0), gate=1, amp=0.25, x=0, y=0, island=0, varDVT29410, 0.9999765250832, 0);
varDVT29411 = LagIn.a);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// DVT.2941
/////////////////////////////////////////////////////////

SynthDef.new("DVT.2941", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDVT2948, varDVT2949, varDVT29410, varDVT29411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// DVT.2942
/////////////////////////////////////////////////////////

SynthDef.new("DVT.2942", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDVT2948, varDVT2949, varDVT29410, varDVT29411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// DVT.2943
/////////////////////////////////////////////////////////

SynthDef.new("DVT.2943", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDVT2948, varDVT2949, varDVT29410, varDVT29411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// DVT.2944
/////////////////////////////////////////////////////////

SynthDef.new("DVT.2944", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDVT2948, varDVT2949, varDVT29410, varDVT29411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Inside.752
/////////////////////////////////////////////////////////

SynthDef.new("Inside.752", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varInside7528, varInside7529, varInside75210, varInside75211;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = ScopeOut.ar(varInside7529, PV_NoiseSynthF.a));
signal = K2A.ar(wave);
modX = Line.ar(wave, wave, wave, LFNoise2.ar(wave * wave, Goertzel.a), 0), 0, modY);
modY = PV_Compander.a);
modZ = FMHEncode0.ar(varInside75210, varInside7529, wave, env);
gateEnv = XLine.ar(varInside75210, wave, wave, Stepper.ar(62.273643275008, wave, 340.52088646818, gate=1, z=0, amp=0.25), 0, 49.061001658141);
wave = Dunique.a);
varInside7528 = SID6581f.ar(PV_RectComb2.a), env, wave, t_trig=0, wave, gate=1, modY, wave, island=0, gate=1, modX, x=0, y=0, wave, gateEnv, modZ, y=0, FMGrainBBF.ar(wave, island=0, modY, PV_RectComb.a), island=0, island=0, gateEnv, gate=1, modX, 1761.2697120429, 0.94871380504774, 0), DriveNoise.ar(varInside7528, wave, bufnum=0), PV_BrickWall.a), PV_MaxMagN.a), wave, varInside75210, wave, x=0, wave);
varInside7529 = BufFrames.a);
varInside75210 = Gendy3.ar(PV_MagDiv.a), y=0, env, z=0, YigMandelbulbN.ar(GrainIn.ar(modX, FFTSubbandFlux.a), z=0, 58.048100929684, modX, varInside75210, t_trig=0, varInside7529, LinExp.ar(amp=0.25, x=0, env, signal, t_trig=0)).exprange(1, SampleRate.ir);, env, wave, modY, CQ_Diff.a), 0.99951654460371, 0).exprange(1, SampleRate.ir);, wave, TRand.ar(varInside75210, modY, t_trig=0), varInside7529, 394.41765786079, modZ, 0);
varInside75211 = Sweep.ar(x=0, bufnum=0);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Inside.7521
/////////////////////////////////////////////////////////

SynthDef.new("Inside.7521", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varInside7528, varInside7529, varInside75210, varInside75211;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Inside.7522
/////////////////////////////////////////////////////////

SynthDef.new("Inside.7522", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varInside7528, varInside7529, varInside75210, varInside75211;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Inside.7523
/////////////////////////////////////////////////////////

SynthDef.new("Inside.7523", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varInside7528, varInside7529, varInside75210, varInside75211;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Inside.7524
/////////////////////////////////////////////////////////

SynthDef.new("Inside.7524", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varInside7528, varInside7529, varInside75210, varInside75211;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.O.442.A
/////////////////////////////////////////////////////////

SynthDef.new("VCL.O.442.A", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLO442A8, varVCLO442A9, varVCLO442A10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = AY8910.ar(wave, wave, gate=1, wave, 952.19359485927, y=0, y=0, signal, x=0, wave, z=0, gate=1, 343.79313492449, varVCLO442A9, 92.428438335927);
signal = Normalizer.ar(wave, env, Dseq.a));
modX = PV_ExtractRepeat.a);
modY = LagControl.a);
modZ = ClipNoise.ar(wave, 0);
gateEnv = Lag2.ar(x=0, bufnum=0, 0.99987725799641, 0);
wave = LinExp.ar(MultiOutUGen.a), wave, signal, gate=1, z=0);
varVCLO442A8 = Osc.ar(22.147386569606, modZ * wave, modY, 0.81913071612705, 0);
varVCLO442A9 = LFTri.ar(modZ * signal, wave, MedianTriggered.ar(wave, wave, modZ, 0.99993147752395, DynKlang.ar(modX, wave, amp=0.25)), 0);
varVCLO442A10 = Gbman2DC.ar(wave, modZ, varVCLO442A9, varVCLO442A10, PureUGen.a), 0);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.O.442.A1
/////////////////////////////////////////////////////////

SynthDef.new("VCL.O.442.A1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLO442A8, varVCLO442A9, varVCLO442A10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.O.442.A2
/////////////////////////////////////////////////////////

SynthDef.new("VCL.O.442.A2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLO442A8, varVCLO442A9, varVCLO442A10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.O.442.A3
/////////////////////////////////////////////////////////

SynthDef.new("VCL.O.442.A3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLO442A8, varVCLO442A9, varVCLO442A10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.O.442.A4
/////////////////////////////////////////////////////////

SynthDef.new("VCL.O.442.A4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLO442A8, varVCLO442A9, varVCLO442A10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Inquis.2653
/////////////////////////////////////////////////////////

SynthDef.new("Inquis.2653", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varInquis26538, varInquis26539;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = LagUD.ar(AtsNoise.ar(419.20046560151, z=0, env, PV_RectComb2.a), 0), varInquis26538, island=0, DiskIn.ar(wave, PV_PhaseShift90.a), t_trig=0), 0);
signal = RedPhasor.ar(amp=0.25, 63.951927341584, wave, wave, env, wave, modX);
modX = WalshHadamard.ar(x=0, wave, 0.99998943448189, 0);
modY = OutputProxy.a);
modZ = UHJ2B.ar(wave, island=0);
gateEnv = OneZero.ar(wave, wave, BiPanB2.ar(14.618501576475, varInquis26539, varInquis26539, varInquis26538), MeanTriggered.ar(wave, modZ, z=0, wave, 0));
wave = TWindex.ar(signal, RandSeed.ar(wave, bufnum=0), wave);
varInquis26538 = GrayNoise.ar(LinRand.a), PV_ExtractRepeat.a));
varInquis26539 = JoshMultiChannelGrain.a);

signal = 9;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Inquis.26531
/////////////////////////////////////////////////////////

SynthDef.new("Inquis.26531", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varInquis26538, varInquis26539;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Inquis.26532
/////////////////////////////////////////////////////////

SynthDef.new("Inquis.26532", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varInquis26538, varInquis26539;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Inquis.26533
/////////////////////////////////////////////////////////

SynthDef.new("Inquis.26533", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varInquis26538, varInquis26539;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Inquis.26534
/////////////////////////////////////////////////////////

SynthDef.new("Inquis.26534", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varInquis26538, varInquis26539;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sze.314
/////////////////////////////////////////////////////////

SynthDef.new("Sze.314", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSze3148, varSze3149, varSze31410, varSze31411, varSze31412;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = MonoGrain.ar(varSze31412, modZ, island=0, y=0, modY, 0);
signal = ClipNoise.ar(0.99334599002944, DoubleWell2.ar(varSze31412, wave, bufnum=0, wave, wave, gateEnv, amp=0.25, varSze3148, LFClipNoise.ar(varSze31410, Slope.ar(varSze31410, 0.99977978978837, 0), 0), 0));
modX = FreeVerb2.ar(VOsc.ar(modY, wave * varSze31412, modZ, PV_SpectralEnhance.a), 0), varSze3148, modZ, y=0, wave, TwoPole.ar(AmpComp.ar(wave * wave, t_trig=0, y=0), PlaneTree.a).exprange(1, SampleRate.ir);, wave, 0.99868633838352, 0), BufDur.a));
modY = Logger.a);
modZ = LatoocarfianC.ar(modY * varSze31411, gate=1, x=0, wave, LastValue.ar(gateEnv, varSze31411), t_trig=0, z=0, varSze31412, 0);
gateEnv = GaussTrig.ar(wave * varSze3149, x=0, 0.99998503166969, 0);
wave = PV_BinWipe.a);
varSze3148 = Nes2.ar(varSze3148, varSze3148, t_trig=0, gate=1, wave, wave, varSze3149, 20.243326085179, amp=0.25, varSze3148, modX, wave, varSze31412, x=0, modX, modX, varSze3149, wave, modY, varSze3148);
varSze3149 = FreeVerb2.ar(island=0, modX, FoaRotate.ar(t_trig=0, wave, BufWr.ar(varSze3148, varSze31412, island=0, island=0), 0), 100.40107824133, env, wave, 0);
varSze31410 = RosslerResL.ar(modX, modZ, wave, Logger.a), wave, env, gateEnv, env, varSze31410, wave, Dfsm.a), 0);
varSze31411 = VOsc3.ar(wave, island=0, modZ, StkPluck.ar(wave, z=0, DelTapRd.ar(wave, varSze31412, modX, wave, 0.99996924528317, 0), 0), modY, 0);
varSze31412 = SetBuf.a);

signal = 2;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sze.3141
/////////////////////////////////////////////////////////

SynthDef.new("Sze.3141", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSze3148, varSze3149, varSze31410, varSze31411, varSze31412;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sze.3142
/////////////////////////////////////////////////////////

SynthDef.new("Sze.3142", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSze3148, varSze3149, varSze31410, varSze31411, varSze31412;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sze.3143
/////////////////////////////////////////////////////////

SynthDef.new("Sze.3143", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSze3148, varSze3149, varSze31410, varSze31411, varSze31412;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sze.3144
/////////////////////////////////////////////////////////

SynthDef.new("Sze.3144", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSze3148, varSze3149, varSze31410, varSze31411, varSze31412;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Bin.Auto.AXQ
/////////////////////////////////////////////////////////

SynthDef.new("Bin.Auto.AXQ", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBinAutoAXQ8, varBinAutoAXQ9, varBinAutoAXQ10, varBinAutoAXQ11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = FoaPushZ.ar(signal, island=0, 0.99995521338544, LPF.ar(bufnum=0, env * env, 0.99604025393197, 0));
signal = TRand.ar(varBinAutoAXQ9, TermanWang.ar(129.74536545856, wave, modY, x=0, wave, 1.2116379673114, island=0, modY, island=0, wave, 0), 1363.7259938859);
modX = AtsPartial.ar(bufnum=0, bufnum=0, y=0, wave, HPZ1.ar(wave, PauseSelfWhenDone.a), 0), 0.99960004866296, 0);
modY = OSTrunc4.ar(modX, modX);
modZ = OnePole.ar(InFeedback.ar(modX, t_trig=0), 4.7892293826158, wave, 0);
gateEnv = TBrownRand.ar(wave, wave, z=0, wave, varBinAutoAXQ11, FFTMKL.a), 0);
wave = Dswitch1.a);
varBinAutoAXQ8 = FFTPhaseDev.a);
varBinAutoAXQ9 = FoaZoomY.ar(varBinAutoAXQ10, modY, MouseButton.a), 0);
varBinAutoAXQ10 = PSinGrain.ar(wave, 3.7632499902398, wave);
varBinAutoAXQ11 = PV_ChainUGen.a);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Bin.Auto.AXQ1
/////////////////////////////////////////////////////////

SynthDef.new("Bin.Auto.AXQ1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBinAutoAXQ8, varBinAutoAXQ9, varBinAutoAXQ10, varBinAutoAXQ11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Bin.Auto.AXQ2
/////////////////////////////////////////////////////////

SynthDef.new("Bin.Auto.AXQ2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBinAutoAXQ8, varBinAutoAXQ9, varBinAutoAXQ10, varBinAutoAXQ11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Bin.Auto.AXQ3
/////////////////////////////////////////////////////////

SynthDef.new("Bin.Auto.AXQ3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBinAutoAXQ8, varBinAutoAXQ9, varBinAutoAXQ10, varBinAutoAXQ11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Bin.Auto.AXQ4
/////////////////////////////////////////////////////////

SynthDef.new("Bin.Auto.AXQ4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBinAutoAXQ8, varBinAutoAXQ9, varBinAutoAXQ10, varBinAutoAXQ11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// SymbOS.Skulls.CL
/////////////////////////////////////////////////////////

SynthDef.new("SymbOS.Skulls.CL", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSymbOSSkullsCL8, varSymbOSSkullsCL9, varSymbOSSkullsCL10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = BFEncode2.ar(gate=1, z=0, island=0, env, island=0, gateEnv);
signal = Unpack1FFT.a);
modX = BFEncode2.ar(varSymbOSSkullsCL8, varSymbOSSkullsCL9, island=0, amp=0.25, t_trig=0, varSymbOSSkullsCL10);
modY = HenonL.ar(AllpassN.ar(23.698295673937, gateEnv, gateEnv, amp=0.25, 0.99998680125401, 0).exprange(1, SampleRate.ir);, varSymbOSSkullsCL8, wave, gateEnv, env, 0.86258216076791, 0);
modZ = CircleRamp.ar(113.73953577659, z=0, varSymbOSSkullsCL9, varSymbOSSkullsCL8, 0.99856579549794, 0);
gateEnv = BufDur.a);
wave = Diwhite.a);
varSymbOSSkullsCL8 = Yig3DGen.a);
varSymbOSSkullsCL9 = SwitchDelay.ar(36.12001080283, modX, signal, island=0, FFTDiffMags.a), ListTrig2.a), LocalBuf.a), 0);
varSymbOSSkullsCL10 = LeastChange.ar(wave, env);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// SymbOS.Skulls.CL1
/////////////////////////////////////////////////////////

SynthDef.new("SymbOS.Skulls.CL1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSymbOSSkullsCL8, varSymbOSSkullsCL9, varSymbOSSkullsCL10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// SymbOS.Skulls.CL2
/////////////////////////////////////////////////////////

SynthDef.new("SymbOS.Skulls.CL2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSymbOSSkullsCL8, varSymbOSSkullsCL9, varSymbOSSkullsCL10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// SymbOS.Skulls.CL3
/////////////////////////////////////////////////////////

SynthDef.new("SymbOS.Skulls.CL3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSymbOSSkullsCL8, varSymbOSSkullsCL9, varSymbOSSkullsCL10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// SymbOS.Skulls.CL4
/////////////////////////////////////////////////////////

SynthDef.new("SymbOS.Skulls.CL4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSymbOSSkullsCL8, varSymbOSSkullsCL9, varSymbOSSkullsCL10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Evul.8192.C
/////////////////////////////////////////////////////////

SynthDef.new("W32.Evul.8192.C", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Evul8192C8, varW32Evul8192C9, varW32Evul8192C10, varW32Evul8192C11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = Limiter.ar(wave, wave, FoaZoomZ.ar(env, wave, 0.98710142812693, Maxamp.ar(y=0, wave)));
signal = SampleDur.a);
modX = NestedAllpassN.ar(wave, gate=1, 6.5250587041159, wave, island=0, 726.81298545355, modY, signal, 0);
modY = PV_CommonMag.a);
modZ = Formlet.ar(x=0, varW32Evul8192C9 * wave, gateEnv, amp=0.25, wave, 0);
gateEnv = BufWr.ar(amp=0.25, y=0, amp=0.25, modY);
wave = AY8910.ar(gate=1, y=0, modZ, bufnum=0, amp=0.25, gate=1, MantissaMask.ar(wave, FFTTrigger.a), 0.99998367750236, 0), varW32Evul8192C11, x=0, wave, varW32Evul8192C11, wave, island=0, 453.49899366682, OutputProxy.a));
varW32Evul8192C8 = AtsBand.ar(69.110402580721, wave, signal, 0.99981505854776, 0);
varW32Evul8192C9 = StkBandedWG.ar(wave, modX, varW32Evul8192C11, gateEnv, 238.20253079911, z=0, 5.2794941676225, varW32Evul8192C9, 1076.3681839708, wave, 0);
varW32Evul8192C10 = DelTapWr.ar(wave, varW32Evul8192C11);
varW32Evul8192C11 = YigCliffordN.ar(modZ * wave, SortBuf.ar(gate=1, wave, modY), amp=0.25, amp=0.25, modZ, PV_FreqBuffer.a), modY, wave, 0);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Evul.8192.C1
/////////////////////////////////////////////////////////

SynthDef.new("W32.Evul.8192.C1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Evul8192C8, varW32Evul8192C9, varW32Evul8192C10, varW32Evul8192C11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Evul.8192.C2
/////////////////////////////////////////////////////////

SynthDef.new("W32.Evul.8192.C2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Evul8192C8, varW32Evul8192C9, varW32Evul8192C10, varW32Evul8192C11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Evul.8192.C3
/////////////////////////////////////////////////////////

SynthDef.new("W32.Evul.8192.C3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Evul8192C8, varW32Evul8192C9, varW32Evul8192C10, varW32Evul8192C11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Evul.8192.C4
/////////////////////////////////////////////////////////

SynthDef.new("W32.Evul.8192.C4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Evul8192C8, varW32Evul8192C9, varW32Evul8192C10, varW32Evul8192C11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Sxe.B.Int
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Sxe.B.Int", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MSxeBInt8, varW97MSxeBInt9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = SetBuf.a);
signal = LPF18.ar(gate=1, varW97MSxeBInt9, y=0, modX);
modX = Trig.ar(x=0, env);
modY = RunningMax.ar(BufCombC.ar(wave, modX, 15.519762464422, modZ, 0.98796217427829, 0), wave);
modZ = BLBufRd.ar(x=0, env, wave);
gateEnv = MarkovSynth.ar(gateEnv, x=0, modX, 6.7900401612777);
wave = Vibrato.ar(wave * modX, x=0, z=0, env, wave, wave, signal, modX);
varW97MSxeBInt8 = MulAdd.a);
varW97MSxeBInt9 = YigClifford3DC.ar(modZ * modZ, modY, modX, modZ, z=0, wave, varW97MSxeBInt8, z=0, PV_Add.a), 0);

signal = 9;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Sxe.B.Int1
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Sxe.B.Int1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MSxeBInt8, varW97MSxeBInt9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Sxe.B.Int2
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Sxe.B.Int2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MSxeBInt8, varW97MSxeBInt9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Sxe.B.Int3
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Sxe.B.Int3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MSxeBInt8, varW97MSxeBInt9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Sxe.B.Int4
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Sxe.B.Int4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MSxeBInt8, varW97MSxeBInt9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// PHX.965
/////////////////////////////////////////////////////////

SynthDef.new("PHX.965", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varPHX9658, varPHX9659, varPHX96510;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = NumControlBuses.a);
signal = StereoConvolution2L.ar(z=0, modZ, modY, gate=1, modZ, x=0, 0.99971588401688, 0);
modX = FoaFocusX.ar(varPHX96510, x=0, signal, 0);
modY = AverageOutput.ar(x=0, Cepstrum.a), 0.96896727881604, 0);
modZ = RMShelf.ar(signal, varPHX9658 * wave, PV_ExtractRepeat.a), PV_PhaseShift270.a), 0);
gateEnv = RunningMin.ar(x=0, amp=0.25);
wave = PV_PartialSynthP.a);
varPHX9658 = LFDNoise3.ar(modY, 0.94091181591222, 0);
varPHX9659 = Changed.ar(wave, amp=0.25);
varPHX96510 = VOSIM.ar(t_trig=0, FitzHughNagumo.ar(DoubleWell3.ar(wave, wave, YigClifford3DC.ar(signal * wave, modY, HPZ1.ar(varPHX9659, 0.99413720874405, EnvGen.ar(modX, gateEnv, 61.253311244411, gate=1, wave, z=0)), gate=1, SharedOut.a), varPHX9659, wave, t_trig=0, 0.9995236015725, 0), modX, z=0, wave, 0.99984929809811, 0), x=0, PV_RandWipe.a), wave, wave, DelayC.ar(y=0, modX, env, 0.99978921012502, 0), bufnum=0, 0.25425792096897, 0).exprange(1, SampleRate.ir);, bufnum=0, t_trig=0, 0.066006901613798, 0);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// PHX.9651
/////////////////////////////////////////////////////////

SynthDef.new("PHX.9651", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varPHX9658, varPHX9659, varPHX96510;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// PHX.9652
/////////////////////////////////////////////////////////

SynthDef.new("PHX.9652", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varPHX9658, varPHX9659, varPHX96510;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// PHX.9653
/////////////////////////////////////////////////////////

SynthDef.new("PHX.9653", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varPHX9658, varPHX9659, varPHX96510;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// PHX.9654
/////////////////////////////////////////////////////////

SynthDef.new("PHX.9654", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varPHX9658, varPHX9659, varPHX96510;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Linux.Scalper.int
/////////////////////////////////////////////////////////

SynthDef.new("Linux.Scalper.int", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varLinuxScalperint8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = AudioControl.ar(131.63752156544);
signal = AudioMSG.ar(island=0, 21.045287679148, 0.97889407795374, 0);
modX = RunningMax.ar(wave, x=0);
modY = Clipper4.ar(gateEnv, modX, modX);
modZ = Balance.ar(wave, x=0, wave, wave, 0.10422405175452, 0);
gateEnv = Gendy3.ar(gateEnv, 1004.8763045886, amp=0.25, bufnum=0, gateEnv * env, modY, y=0, modX, amp=0.25, 0.75940033600347, 0);
wave = AtsSynth.ar(island=0, wave, wave, gate=1, env, island=0, modX, GrainIn.ar(wave, wave, wave, 12.894649328116, island=0, t_trig=0, modZ, Oregonator.ar(modX, wave, t_trig=0, modX, Coyote.a), wave, t_trig=0, x=0, SOMAreaWr.a), 0), 0), 0);
varLinuxScalperint8 = RMShelf2.ar(TGrains.ar(x=0, wave, signal, gate=1, x=0, wave, modZ, Summer.ar(Hilbert.ar(gate=1, WrapIndex.ar(wave, signal, 0.94778638230579, 0), 0), bufnum=0, modX, z=0), gateEnv), wave * wave, signal, 0.99953012881618, 0);

signal = 8;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Linux.Scalper.int1
/////////////////////////////////////////////////////////

SynthDef.new("Linux.Scalper.int1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varLinuxScalperint8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Linux.Scalper.int2
/////////////////////////////////////////////////////////

SynthDef.new("Linux.Scalper.int2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varLinuxScalperint8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Linux.Scalper.int3
/////////////////////////////////////////////////////////

SynthDef.new("Linux.Scalper.int3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varLinuxScalperint8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Linux.Scalper.int4
/////////////////////////////////////////////////////////

SynthDef.new("Linux.Scalper.int4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varLinuxScalperint8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Niknat
/////////////////////////////////////////////////////////

SynthDef.new("WM.Niknat", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMNiknat8, varWMNiknat9, varWMNiknat10, varWMNiknat11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = AudioControl.ar(island=0);
signal = FoaPanB.ar(signal, modX, varWMNiknat9, 0.99994582397396, 0);
modX = PV_Freeze.a);
modY = PV_BinBufRd.a);
modZ = InGrainI.ar(modY, wave, wave, modZ, modX, island=0, Foa.a), 0);
gateEnv = SoftClipAmp.ar(gate=1, gate=1, MdaPiano.ar(signal * wave, varWMNiknat9, 149.6629314257, 7.689947498462, bufnum=0, 15.633578366483, SyncSaw.ar(varWMNiknat8, 44.228650715314, 0.20706762524877, 0), FFTSpread.a), wave, gateEnv, wave, island=0, varWMNiknat8, varWMNiknat11, 7.2402183264976, 0.99864447526177, 0), 0);
wave = PV_PartialSynthF.a);
varWMNiknat8 = FBSineC.ar(wave * wave, island=0, 97.537664091883, gateEnv, amp=0.25, Convolution3.ar(varWMNiknat10, 4575.107212607, 57.923662383238, t_trig=0, 0.78406140099124, 0), modX, 0.59539683735991, PV_OddBin.a));
varWMNiknat9 = AbstractOut.a);
varWMNiknat10 = Line.ar(x=0, 81.100531043422, 1220.4728336304, 0.99089837711582, 0, 204.29909438096);
varWMNiknat11 = LinCongN.ar(Crest.a).exprange(1, SampleRate.ir);, y=0, x=0, island=0, modX, modZ, 0);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Niknat1
/////////////////////////////////////////////////////////

SynthDef.new("WM.Niknat1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMNiknat8, varWMNiknat9, varWMNiknat10, varWMNiknat11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Niknat2
/////////////////////////////////////////////////////////

SynthDef.new("WM.Niknat2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMNiknat8, varWMNiknat9, varWMNiknat10, varWMNiknat11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Niknat3
/////////////////////////////////////////////////////////

SynthDef.new("WM.Niknat3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMNiknat8, varWMNiknat9, varWMNiknat10, varWMNiknat11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Niknat4
/////////////////////////////////////////////////////////

SynthDef.new("WM.Niknat4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMNiknat8, varWMNiknat9, varWMNiknat10, varWMNiknat11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// IMI.D
/////////////////////////////////////////////////////////

SynthDef.new("IMI.D", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varIMID8, varIMID9, varIMID10, varIMID11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = GravityGrid2.ar(14.788331134588, varIMID9, t_trig=0, bufnum=0, z=0, env, 0);
signal = PV_RectComb.a);
modX = Osc.ar(modX, varIMID11, 554.22037115163, 0.83501814554682, 0);
modY = Slub.ar(amp=0.25, gateEnv);
modZ = LPFVS6.ar(signal, gateEnv * env, gateEnv);
gateEnv = CheckBadValues.ar(gateEnv, gate=1, wave);
wave = LFDNoise1.ar(wave * wave, wave, 0);
varIMID8 = FoaPushZ.ar(NL2.ar(gate=1, t_trig=0, z=0, z=0, bufnum=0, island=0, 0.99994234799542, 0), t_trig=0, 0.99946407863102, 0);
varIMID9 = TBall.ar(bufnum=0, t_trig=0, DC.ar(y=0), wave);
varIMID10 = BPZ2.ar(varIMID10, wave, 0);
varIMID11 = AudioControl.ar(wave);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// IMI.D1
/////////////////////////////////////////////////////////

SynthDef.new("IMI.D1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varIMID8, varIMID9, varIMID10, varIMID11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// IMI.D2
/////////////////////////////////////////////////////////

SynthDef.new("IMI.D2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varIMID8, varIMID9, varIMID10, varIMID11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// IMI.D3
/////////////////////////////////////////////////////////

SynthDef.new("IMI.D3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varIMID8, varIMID9, varIMID10, varIMID11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// IMI.D4
/////////////////////////////////////////////////////////

SynthDef.new("IMI.D4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varIMID8, varIMID9, varIMID10, varIMID11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Dark_Apocalypse.1020
/////////////////////////////////////////////////////////

SynthDef.new("Dark_Apocalypse.1020", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDark_Apocalypse10208, varDark_Apocalypse10209, varDark_Apocalypse102010;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = RedPhasor.ar(varDark_Apocalypse10208, 638.98524452266, env, t_trig=0, varDark_Apocalypse102010, wave, varDark_Apocalypse10209);
signal = PV_Conj.a);
modX = BLowPass.ar(island=0, varDark_Apocalypse10208 * varDark_Apocalypse102010, DoubleWell3.ar(3.7514717222214, wave, signal, UHJ2B.ar(t_trig=0, Dfsm.a)), island=0, island=0, AnalyseEvents2.ar(signal, varDark_Apocalypse10208, wave, 3.5956172033989, amp=0.25, 2390.8560780944), 0), 0.99064225526295, 0);
modY = B2A.ar(FFTPower.a), wave, SinGrainIBF.ar(wave, AudioControl.ar(varDark_Apocalypse102010), wave, varDark_Apocalypse102010, DriveNoise.ar(modZ, modX, modX), signal, signal, t_trig=0, z=0, modX, LFDNoise0.ar(wave * varDark_Apocalypse102010, 0.99997495673564, 0), 0), 619.001520264);
modZ = OSWrap4.ar(gate=1, varDark_Apocalypse10208, y=0);
gateEnv = PV_MagExp.a);
wave = GlitchHPF.ar(Resonz.ar(modX, TBrownRand.ar(modZ, bufnum=0, z=0, varDark_Apocalypse10209, y=0, 0.99994984604126, 0).exprange(1, SampleRate.ir);, modY, 0.99967324211967, 0), modX, wave, 0);
varDark_Apocalypse10208 = Streson.ar(TRand.ar(varDark_Apocalypse102010, wave, bufnum=0), 155.99501354746, varDark_Apocalypse10209, 0.99797757311303, 0);
varDark_Apocalypse10209 = SOS.ar(varDark_Apocalypse102010, wave, amp=0.25, varDark_Apocalypse10209, WidthFirstUGen.a), wave, 0.99987347630035, 0);
varDark_Apocalypse102010 = AllpassC.ar(wave, t_trig=0, varDark_Apocalypse10208, signal, 0.22336441408773, 0);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Dark_Apocalypse.10201
/////////////////////////////////////////////////////////

SynthDef.new("Dark_Apocalypse.10201", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDark_Apocalypse10208, varDark_Apocalypse10209, varDark_Apocalypse102010;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Dark_Apocalypse.10202
/////////////////////////////////////////////////////////

SynthDef.new("Dark_Apocalypse.10202", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDark_Apocalypse10208, varDark_Apocalypse10209, varDark_Apocalypse102010;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Dark_Apocalypse.10203
/////////////////////////////////////////////////////////

SynthDef.new("Dark_Apocalypse.10203", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDark_Apocalypse10208, varDark_Apocalypse10209, varDark_Apocalypse102010;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Dark_Apocalypse.10204
/////////////////////////////////////////////////////////

SynthDef.new("Dark_Apocalypse.10204", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDark_Apocalypse10208, varDark_Apocalypse10209, varDark_Apocalypse102010;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Cap
/////////////////////////////////////////////////////////

SynthDef.new("WM.Cap", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMCap8, varWMCap9, varWMCap10, varWMCap11, varWMCap12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = TGaussRand.ar(wave, z=0, 29.044163534161, 0.99306793787074, 0);
signal = HenonL.ar(wave, modX, 91.6344723095, y=0, signal, 0.99997893142092, 0);
modX = StkSaxofony.ar(signal * gateEnv, modZ, z=0, varWMCap8, wave, 1788.6059749418, wave, island=0, varWMCap11, env, 0);
modY = LFDNoise3.ar(modX, Linen.a), 0);
modZ = Convolution2L.ar(modY, Allpass1.ar(amp=0.25, WAmp.a).exprange(1, SampleRate.ir);, 0.98059815750991, 0), PV_Add.a), env, wave, 0.71850901461503, 0);
gateEnv = StkSaxofony.ar(varWMCap10 * wave, amp=0.25, wave, wave, x=0, env, varWMCap11, wave, HPZ2.ar(signal, 0.9998374337818, 0), signal, 0);
wave = Balance.ar(Lag3.ar(amp=0.25, gate=1, LinCongN.ar(wave * wave, gateEnv, 15.677928111203, modX, varWMCap10, 0.99010299193152, 0), BufInfoUGenBase.a)), gate=1, InGrainBBF.ar(varWMCap10, wave, modZ, wave, z=0, gate=1, wave, amp=0.25, varWMCap11, 0), wave, wave, 0);
varWMCap8 = TIRand.ar(1301.8875589016, island=0, wave);
varWMCap9 = FitzHughNagumo.ar(wave, varWMCap10, t_trig=0, modX, wave, varWMCap11, gateEnv, 0.93693301279061, 0);
varWMCap10 = Convolution3.ar(gateEnv, wave, Dreset.a), varWMCap11, 0.87934119639663, 0);
varWMCap11 = RedLbyl.ar(signal, gate=1, env);
varWMCap12 = Dbufwr.a);

signal = 2;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Cap1
/////////////////////////////////////////////////////////

SynthDef.new("WM.Cap1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMCap8, varWMCap9, varWMCap10, varWMCap11, varWMCap12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Cap2
/////////////////////////////////////////////////////////

SynthDef.new("WM.Cap2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMCap8, varWMCap9, varWMCap10, varWMCap11, varWMCap12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Cap3
/////////////////////////////////////////////////////////

SynthDef.new("WM.Cap3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMCap8, varWMCap9, varWMCap10, varWMCap11, varWMCap12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Cap4
/////////////////////////////////////////////////////////

SynthDef.new("WM.Cap4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMCap8, varWMCap9, varWMCap10, varWMCap11, varWMCap12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Cards.trojan
/////////////////////////////////////////////////////////

SynthDef.new("W32.Cards.trojan", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Cardstrojan8, varW32Cardstrojan9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = CQ_Diff.a);
signal = PV_LocalMax.a);
modX = Timer.ar(wave);
modY = InGrainI.ar(t_trig=0, wave, Latoocarfian2DC.ar(z=0, wave, FoaFocusY.ar(bufnum=0, x=0, wave, 0), 25.092254699884, modY, Balance.ar(varW32Cardstrojan9, Convolution2L.ar(31.52606842617, 4.8606148731696, gate=1, 1062.7621257778, x=0, gateEnv, 0), gateEnv, amp=0.25, 0.83828034275741, 0), TwoTube.ar(y=0, bufnum=0, y=0, wave, modZ, PV_RandComb.a), 0), DetaBlockerBuf.a), RedDPCMencode.ar(env, modX), 0), signal, wave, t_trig=0, wave, 0);
modZ = Klang.ar(gate=1, VDiskIn.ar(gateEnv, signal, z=0, x=0, varW32Cardstrojan8), island=0);
gateEnv = GrainBuf.ar(x=0, signal, gate=1, varW32Cardstrojan9, wave, amp=0.25, modX, y=0, x=0, z=0, LinCongL.ar(wave * wave, island=0, z=0, signal, wave, modY, 0), 0);
wave = MaxLocalBufs.a);
varW32Cardstrojan8 = Diwhite.a);
varW32Cardstrojan9 = Slew.ar(gate=1, wave, z=0, NLFiltN.ar(FMGrainB.ar(varW32Cardstrojan9, varW32Cardstrojan9, 141.05212036066, amp=0.25, modX, wave, 0.99038185121352, 0), t_trig=0, bufnum=0, env, env, gate=1, PlaneTree.a), 0), 0);

signal = 9;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Cards.trojan1
/////////////////////////////////////////////////////////

SynthDef.new("W32.Cards.trojan1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Cardstrojan8, varW32Cardstrojan9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Cards.trojan2
/////////////////////////////////////////////////////////

SynthDef.new("W32.Cards.trojan2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Cardstrojan8, varW32Cardstrojan9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Cards.trojan3
/////////////////////////////////////////////////////////

SynthDef.new("W32.Cards.trojan3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Cardstrojan8, varW32Cardstrojan9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Cards.trojan4
/////////////////////////////////////////////////////////

SynthDef.new("W32.Cards.trojan4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Cardstrojan8, varW32Cardstrojan9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Hydra.403
/////////////////////////////////////////////////////////

SynthDef.new("Hydra.403", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHydra4038, varHydra4039, varHydra40310;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = DoubleNestedAllpassC.ar(NestedAllpassC.ar(2.8782229650694, z=0, modX, y=0, x=0, modZ, bufnum=0, 0.99997952726613, 0), modX, 20.074266535626, BPeakEQ.ar(modY, wave, y=0, x=0, BufGrainI.ar(varHydra4038, varHydra4038, bufnum=0, gate=1, FMHDecode1.ar(amp=0.25, z=0, 631.15201486901, bufnum=0, env, wave, varHydra40310, island=0, x=0, modX, z=0, env, 0), wave, BFPanner.a), amp=0.25, gateEnv, wave, 0), 0), y=0, 6.4037017148925, varHydra4038, varHydra4038, y=0, OSTrunc4.ar(wave, wave), PV_PhaseShift90.a), TExpRand.ar(wave, DiskOut.ar(env, 11.650777230489), 14.638024601005));
signal = PVSynth.ar(z=0, wave, varHydra4038, amp=0.25, z=0, varHydra40310, amp=0.25, varHydra4039, 0);
modX = Qitch.a);
modY = BufGrainBF.ar(wave, varHydra4039, 366.64396331184, varHydra4039, z=0, signal, wave, varHydra40310, varHydra4039, modY, 0.96447341358396, 0);
modZ = TwoZero.ar(14.293852812099, modX * modX, modY, 0.99978567519634, 0);
gateEnv = OSTrunc8.ar(modZ, wave);
wave = IEnvGen.ar(modX, 41.514285178168, BufCombN.ar(wave, varHydra4038, z=0, signal, 0.99991472502997, SinGrain.ar(208.38118111606, t_trig=0, wave * wave, 0.99972093777211, 0)), SharedIn.a));
varHydra4038 = FreeVerb.ar(gate=1, Fold.ar(bufnum=0, gate=1, 34.980747119636), z=0, bufnum=0, Out.ar(t_trig=0, t_trig=0), 0);
varHydra4039 = GaussTrig.ar(WrapIndex.ar(modY, Squiz.ar(modX, y=0, wave, amp=0.25, IndexInBetween.ar(z=0, 72.409766517777, 0.9999884609108, IRand.a)), 0), 0.99998318939855, 0).exprange(1, SampleRate.ir);, wave, 0.99875410618343, 0);
varHydra40310 = PackFFT.a);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Hydra.4031
/////////////////////////////////////////////////////////

SynthDef.new("Hydra.4031", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHydra4038, varHydra4039, varHydra40310;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Hydra.4032
/////////////////////////////////////////////////////////

SynthDef.new("Hydra.4032", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHydra4038, varHydra4039, varHydra40310;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Hydra.4033
/////////////////////////////////////////////////////////

SynthDef.new("Hydra.4033", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHydra4038, varHydra4039, varHydra40310;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Hydra.4034
/////////////////////////////////////////////////////////

SynthDef.new("Hydra.4034", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHydra4038, varHydra4039, varHydra40310;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Wazzu.DD
/////////////////////////////////////////////////////////

SynthDef.new("WM.Wazzu.DD", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMWazzuDD8, varWMWazzuDD9, varWMWazzuDD10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = BufRateScale.a);
signal = Clipper32.ar(272.92247791528, t_trig=0, varWMWazzuDD8);
modX = PV_Conj.a);
modY = Pan4.ar(y=0, amp=0.25, env, signal);
modZ = Allpass2.ar(modY, wave * modZ, varWMWazzuDD9, modX, RHPF.ar(varWMWazzuDD9, Amplitude.ar(varWMWazzuDD10, wave, 211.28483609304, wave, 0).exprange(1, SampleRate.ir);, modY, 0.99997790364165, HyperTerrain.ar(64.624848164693, z=0, 6.7393721494421, 349.54632193251, 0.68372703003871, 0)));
gateEnv = BufChannels.a);
wave = FoaPressX.ar(x=0, PartConv.ar(wave, modX, varWMWazzuDD9, wave, 0), wave, 0);
varWMWazzuDD8 = PV_MagScale.a);
varWMWazzuDD9 = PV_MagScale.a);
varWMWazzuDD10 = YigGen.a);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Wazzu.DD1
/////////////////////////////////////////////////////////

SynthDef.new("WM.Wazzu.DD1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMWazzuDD8, varWMWazzuDD9, varWMWazzuDD10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Wazzu.DD2
/////////////////////////////////////////////////////////

SynthDef.new("WM.Wazzu.DD2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMWazzuDD8, varWMWazzuDD9, varWMWazzuDD10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Wazzu.DD3
/////////////////////////////////////////////////////////

SynthDef.new("WM.Wazzu.DD3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMWazzuDD8, varWMWazzuDD9, varWMWazzuDD10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Wazzu.DD4
/////////////////////////////////////////////////////////

SynthDef.new("WM.Wazzu.DD4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMWazzuDD8, varWMWazzuDD9, varWMWazzuDD10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Beavis.671
/////////////////////////////////////////////////////////

SynthDef.new("Beavis.671", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBeavis6718, varBeavis6719, varBeavis67110;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = InRange.ar(bufnum=0, t_trig=0, y=0);
signal = LagIn.a);
modX = InGrain.ar(y=0, wave, 57.211851091477, 0.99113561528887, 0);
modY = Unpack1FFT.a);
modZ = Compander.ar(signal, 258.26077147046, wave, bufnum=0, wave, modZ, island=0, 0.0333444643107, 0);
gateEnv = AbstractOut.a);
wave = LFClipNoise.ar(wave, Sum3.a), 0);
varBeavis6718 = FreeVerb2.ar(env, bufnum=0, wave, gateEnv, z=0, BLowCut.ar(447.85997040339, wave, modX, Shaper.ar(signal, island=0, 0.99971561505659, 0)), 0);
varBeavis6719 = TDuty.ar(bufnum=0, wave, 24.282558962937, PV_LocalMax.a), y=0);
varBeavis67110 = PartConv.ar(bufnum=0, wave, bufnum=0, 0.87467775914609, EnvGen.ar(bufnum=0, varBeavis6718, wave, wave, PitchShift.ar(wave, NLFiltN.ar(z=0, x=0, wave, wave, modY, z=0, 0.9990421985447, 0), modY, y=0, y=0, 0.95905052505544, 0), bufnum=0));

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Beavis.6711
/////////////////////////////////////////////////////////

SynthDef.new("Beavis.6711", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBeavis6718, varBeavis6719, varBeavis67110;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Beavis.6712
/////////////////////////////////////////////////////////

SynthDef.new("Beavis.6712", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBeavis6718, varBeavis6719, varBeavis67110;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Beavis.6713
/////////////////////////////////////////////////////////

SynthDef.new("Beavis.6713", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBeavis6718, varBeavis6719, varBeavis67110;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Beavis.6714
/////////////////////////////////////////////////////////

SynthDef.new("Beavis.6714", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBeavis6718, varBeavis6719, varBeavis67110;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Demorali.359
/////////////////////////////////////////////////////////

SynthDef.new("Demorali.359", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDemorali3598, varDemorali3599;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = BufMax.a);
signal = RHPF.ar(island=0, wave * wave, signal, modZ, 0);
modX = StkPluck.ar(PV_MagAbove.a).exprange(1, SampleRate.ir);, FoaDominateY.ar(4.1653677417978, 43.530989380696, 0.99871714706844, 0), env, 0);
modY = WaveTerrain.ar(y=0, 107.9479461708, env, Delay1.ar(modY, wave, 0), env, 0.1688969635638, 0);
modZ = PureUGen.a);
gateEnv = Delay1.ar(gateEnv, wave, 0);
wave = BeepU.a);
varDemorali3598 = BLowCut.ar(modZ, Out.ar(647.83101847513, 311.69299183901).exprange(1, SampleRate.ir);, x=0, bufnum=0);
varDemorali3599 = VarSaw.ar(env * wave, 13.318019145201, wave, signal, 0);

signal = 9;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Demorali.3591
/////////////////////////////////////////////////////////

SynthDef.new("Demorali.3591", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDemorali3598, varDemorali3599;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Demorali.3592
/////////////////////////////////////////////////////////

SynthDef.new("Demorali.3592", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDemorali3598, varDemorali3599;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Demorali.3593
/////////////////////////////////////////////////////////

SynthDef.new("Demorali.3593", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDemorali3598, varDemorali3599;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Demorali.3594
/////////////////////////////////////////////////////////

SynthDef.new("Demorali.3594", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDemorali3598, varDemorali3599;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// PWSTEAL.Trojan
/////////////////////////////////////////////////////////

SynthDef.new("PWSTEAL.Trojan", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varPWSTEALTrojan8, varPWSTEALTrojan9, varPWSTEALTrojan10, varPWSTEALTrojan11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = PV_Div.a);
signal = LADSPA.ar(Free.a), z=0, wave);
modX = NestedAllpassN.ar(y=0, gate=1, 14.691770813554, y=0, 34.552568428765, gateEnv, PV_SoftWipe.a), RMAFoodChainL.ar(wave * wave, t_trig=0, gateEnv, modY, varPWSTEALTrojan11, varPWSTEALTrojan11, varPWSTEALTrojan11, x=0, z=0, island=0, y=0, gateEnv, varPWSTEALTrojan11, 0.96790427288971, 0), PanX2D.ar(gateEnv, IndexL.ar(amp=0.25, varPWSTEALTrojan8, BufMax.a), Dtag.a)), varPWSTEALTrojan8, varPWSTEALTrojan9, wave, wave, bufnum=0, 24.45127127074));
modY = KeyState.a);
modZ = Concat.ar(varPWSTEALTrojan9, 105.52355096821, wave, bufnum=0, wave, bufnum=0, wave, modX, wave, FoaTilt.ar(varPWSTEALTrojan8, modY, Gendy3.ar(modZ, varPWSTEALTrojan9, bufnum=0, wave, env * modX, varPWSTEALTrojan11, 228.20644117021, gate=1, varPWSTEALTrojan11, 0.3102754447889, 0), 0), Breakcore.ar(DelTapRd.ar(t_trig=0, gate=1, wave, AmplitudeMod.ar(z=0, z=0, varPWSTEALTrojan11, Stepper.ar(varPWSTEALTrojan10, varPWSTEALTrojan8, varPWSTEALTrojan8, modY, amp=0.25, gateEnv), 0), 0.99367448242348, 0), wave, modX, signal, wave), bufnum=0, 0.95275206251971, 0);
gateEnv = CuspL.ar(Dser.a).exprange(1, SampleRate.ir);, wave, t_trig=0, wave, 0.99929443256621, 0);
wave = GlitchHPF.ar(wave, CombN.ar(modY, 483.65490018402, z=0, island=0, AtsFreq.ar(42.075041896979, SID6581f.ar(Tumble.ar(varPWSTEALTrojan11, modY, wave, bufnum=0, modZ), bufnum=0, z=0, 95.038373565761, varPWSTEALTrojan11, varPWSTEALTrojan9, bufnum=0, island=0, amp=0.25, island=0, FoaProximity.ar(23.656375620471, gateEnv, 0.98327696315007, EnvDetect.ar(wave, x=0, island=0)), bufnum=0, gate=1, x=0, FFTComplexDev.a), wave, wave, 1.9491313594986, x=0, varPWSTEALTrojan8, island=0, wave, wave, 144.87109747483, wave, 93.255919263277), modY, varPWSTEALTrojan10, 0), 0).exprange(1, SampleRate.ir);, 0.9274851228461, 0);
varPWSTEALTrojan8 = FoaDirectO.ar(varPWSTEALTrojan8, modX, 0.99990272071351, 0);
varPWSTEALTrojan9 = PV_XFade.a);
varPWSTEALTrojan10 = OSTrunc8.ar(wave, signal);
varPWSTEALTrojan11 = RedNoise.ar(bufnum=0, SinTone.ar(FoaNFC.ar(938.42631993276, modX, wave, 0).exprange(1, SampleRate.ir);, wave, modX, 0), 0);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// PWSTEAL.Trojan1
/////////////////////////////////////////////////////////

SynthDef.new("PWSTEAL.Trojan1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varPWSTEALTrojan8, varPWSTEALTrojan9, varPWSTEALTrojan10, varPWSTEALTrojan11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// PWSTEAL.Trojan2
/////////////////////////////////////////////////////////

SynthDef.new("PWSTEAL.Trojan2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varPWSTEALTrojan8, varPWSTEALTrojan9, varPWSTEALTrojan10, varPWSTEALTrojan11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// PWSTEAL.Trojan3
/////////////////////////////////////////////////////////

SynthDef.new("PWSTEAL.Trojan3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varPWSTEALTrojan8, varPWSTEALTrojan9, varPWSTEALTrojan10, varPWSTEALTrojan11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// PWSTEAL.Trojan4
/////////////////////////////////////////////////////////

SynthDef.new("PWSTEAL.Trojan4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varPWSTEALTrojan8, varPWSTEALTrojan9, varPWSTEALTrojan10, varPWSTEALTrojan11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VBS.Exper.A
/////////////////////////////////////////////////////////

SynthDef.new("VBS.Exper.A", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVBSExperA8, varVBSExperA9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = AmplitudeMod.ar(26.67097147789, amp=0.25, RLPFD.ar(z=0, bufnum=0, gate=1, StkSaxofony.ar(T2K.a).exprange(1, SampleRate.ir);, gate=1, 14.916487300489, wave, wave, island=0, 607.25332610063, x=0, bufnum=0, Formlet.ar(t_trig=0, modZ * modZ, varVBSExperA8, KeyState.a), 0.99956548132465, 0), AY8910.ar(t_trig=0, x=0, env, modZ, wave, modY, signal, wave, island=0, gate=1, wave, gate=1, z=0, island=0, modZ)), AudioMSG.ar(signal, 130.02174279975, Max.a), 0), 0), StkBlowHole.ar(modY * signal, wave, Wrap.ar(NLFiltN.ar(varVBSExperA8, t_trig=0, y=0, gateEnv, amp=0.25, z=0, wave, 0), wave, signal), wave, wave, LatoocarfianN.ar(FFTMKL.a).exprange(1, SampleRate.ir);, 80.287010712785, modX, signal, amp=0.25, 840.35265711909, modX, DetaBlockerBuf.a), 0), 0.44058370610542, 0), 0);
signal = KeyState.a);
modX = Gendy5.ar(114.17880881121, gateEnv, gate=1, x=0, wave, varVBSExperA9, modZ, varVBSExperA9, gateEnv, Dust.ar(x=0, varVBSExperA9, 0), modZ, 0);
modY = HenonL.ar(modY * varVBSExperA9, 15.150037614406, varVBSExperA9, 12.350447161023, gateEnv, 0.99983879578909, 0);
modZ = LinCongN.ar(modX * wave, gateEnv, x=0, wave, varVBSExperA8, 0.96530434655194, 0);
gateEnv = PV_Cutoff.a);
wave = ListTrig2.a);
varVBSExperA8 = MeanTriggered.ar(island=0, modZ, amp=0.25, 0.95816504166227, 0);
varVBSExperA9 = BeatTrack2.a);

signal = 9;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VBS.Exper.A1
/////////////////////////////////////////////////////////

SynthDef.new("VBS.Exper.A1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVBSExperA8, varVBSExperA9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VBS.Exper.A2
/////////////////////////////////////////////////////////

SynthDef.new("VBS.Exper.A2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVBSExperA8, varVBSExperA9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VBS.Exper.A3
/////////////////////////////////////////////////////////

SynthDef.new("VBS.Exper.A3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVBSExperA8, varVBSExperA9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VBS.Exper.A4
/////////////////////////////////////////////////////////

SynthDef.new("VBS.Exper.A4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVBSExperA8, varVBSExperA9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Intruder
/////////////////////////////////////////////////////////

SynthDef.new("Intruder", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varIntruder8, varIntruder9, varIntruder10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = MoogLadder.ar(modX, island=0, wave, Logistic.ar(wave, gateEnv * wave, varIntruder8, RedDPCMdecode.ar(OSTrunc4.ar(OnePole.ar(y=0, GravityGrid.ar(1090.4201749882, 2.4069556933714, signal, 395.75062393545, modY, 0.98901364093587, 0), Max.a), 0), modX)), 0), 0);
signal = OSWrap4.ar(wave, RLPF.ar(modY, wave * wave, modY, MouseX.a), 0), varIntruder9);
modX = MdaPiano.ar(wave * wave, t_trig=0, 596.07579842157, bufnum=0, varIntruder10, bufnum=0, y=0, modX, varIntruder10, BHiCut.ar(wave, LFClipNoise.ar(wave * varIntruder10, 0.99986848022502, RedDPCMencode.ar(t_trig=0, y=0)).exprange(1, SampleRate.ir);, Formlet.ar(z=0, wave * wave, varIntruder9, wave, 0.99653781292983, 0), wave), wave, 137.87467021324, y=0, wave, signal, env, 0);
modY = DiskIn.ar(z=0, 8.2080742752635, modX);
modZ = BufChannels.a);
gateEnv = NRand.a);
wave = StandardN.ar(wave * wave, y=0, x=0, modX, 0.82779314905573, 0);
varIntruder8 = Rand.a);
varIntruder9 = SinGrainBF.ar(env, y=0, wave, 45.367423537468, varIntruder8, varIntruder10, 128.19565018852, modX, 0);
varIntruder10 = DegreeToKey.ar(wave, IEnvGen.ar(16.540894514091, PV_CopyPhase.a), PV_BrickWall.a), 0), amp=0.25, modY, 0);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Intruder1
/////////////////////////////////////////////////////////

SynthDef.new("Intruder1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varIntruder8, varIntruder9, varIntruder10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Intruder2
/////////////////////////////////////////////////////////

SynthDef.new("Intruder2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varIntruder8, varIntruder9, varIntruder10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Intruder3
/////////////////////////////////////////////////////////

SynthDef.new("Intruder3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varIntruder8, varIntruder9, varIntruder10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Intruder4
/////////////////////////////////////////////////////////

SynthDef.new("Intruder4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varIntruder8, varIntruder9, varIntruder10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Messew.3016
/////////////////////////////////////////////////////////

SynthDef.new("Messew.3016", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varMessew30168, varMessew30169, varMessew301610, varMessew301611;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = LagControl.a);
signal = FoaPressZ.ar(RMAFoodChainL.ar(varMessew301611 * wave, amp=0.25, env, wave, 590.24500682037, varMessew30168, wave, varMessew30169, 301.85579811908, gate=1, z=0, varMessew30168, varMessew301611, FoaFocusX.ar(varMessew301610, wave, 0.59710413854581, LPZ2.ar(gateEnv, 0.98743957919101, NLFiltL.ar(wave, modZ, wave, z=0, x=0, x=0, 0.99972838549822, 0))), 0), SendReply.ar(12.40939511275, signal, y=0, wave), 0.93425077941389, 0);
modX = Goertzel.a);
modY = Clip.ar(varMessew301610, varMessew301610, gate=1);
modZ = RMEQSuite.a);
gateEnv = StkFlute.ar(varMessew30168 * wave, varMessew30168, varMessew30168, bufnum=0, VMScan2D.ar(MantissaMask.ar(StkMoog.ar(signal * env, z=0, modX, wave, x=0, amp=0.25, varMessew30169, modZ, 0), wave, 0.81072237148954, PV_Cutoff.a)), 0.31665218949518, 0), 0);
wave = OutputProxy.a);
varMessew30168 = PVSynth.ar(AllpassN.ar(bufnum=0, varMessew30168, modZ, varMessew301610, gateEnv, 0), modX, gate=1, modZ, t_trig=0, gate=1, bufnum=0, wave, 0);
varMessew30169 = IEnvGen.ar(y=0, varMessew301611, 0.99761210710693, 0);
varMessew301610 = BLBufRd.ar(signal, y=0, 29.549738890766);
varMessew301611 = LinPan2.ar(XFade2.ar(varMessew301611, wave, 18.990367242321, 590.47114042433), wave, z=0);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Messew.30161
/////////////////////////////////////////////////////////

SynthDef.new("Messew.30161", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varMessew30168, varMessew30169, varMessew301610, varMessew301611;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Messew.30162
/////////////////////////////////////////////////////////

SynthDef.new("Messew.30162", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varMessew30168, varMessew30169, varMessew301610, varMessew301611;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Messew.30163
/////////////////////////////////////////////////////////

SynthDef.new("Messew.30163", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varMessew30168, varMessew30169, varMessew301610, varMessew301611;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Messew.30164
/////////////////////////////////////////////////////////

SynthDef.new("Messew.30164", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varMessew30168, varMessew30169, varMessew301610, varMessew301611;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.Genocide.952
/////////////////////////////////////////////////////////

SynthDef.new("VCL.Genocide.952", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLGenocide9528, varVCLGenocide9529, varVCLGenocide95210;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = Nes2.ar(5.9226874646501, gateEnv, modZ, NRand.a), modX, wave, 44.305657962613, wave, Henon2DC.ar(wave, bufnum=0, wave, signal, y=0, amp=0.25, 0.99945261239645, 0), wave, wave, wave, signal, x=0, modX, gate=1, y=0, wave, 398.67414590632, varVCLGenocide9528);
signal = FoaDominateY.ar(modZ, t_trig=0, 0.73693645312053, 0);
modX = AY8910.ar(signal, varVCLGenocide9528, NumInputBuses.a), y=0, wave, y=0, gateEnv, AtsAmp.ar(z=0, 548.91632203839, island=0, AllpassN.ar(env, PV_Cutoff.a), varVCLGenocide9528, varVCLGenocide95210, modZ, 0), 0), wave, varVCLGenocide9529, varVCLGenocide9529, varVCLGenocide9529, wave, gate=1, modZ);
modY = FFTMKL.a);
modZ = LocalBuf.a);
gateEnv = StandardN.ar(Dswitch.a).exprange(1, SampleRate.ir);, modZ, y=0, modY, PV_Morph.a), 0);
wave = LatoocarfianL.ar(DFM1.ar(bufnum=0, varVCLGenocide9528 * wave, t_trig=0, modY, wave, t_trig=0, 0.97404984397006, 0).exprange(1, SampleRate.ir);, modX, z=0, y=0, modY, 229.67215946282, wave, 0.99773891904538, Spring.ar(island=0, varVCLGenocide9529, varVCLGenocide9529));
varVCLGenocide9528 = BFGrainPanner.a);
varVCLGenocide9529 = Free.a);
varVCLGenocide95210 = BFEncode2.ar(wave, signal, 1981.4246228045, signal, PV_MagMul.a), wave);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.Genocide.9521
/////////////////////////////////////////////////////////

SynthDef.new("VCL.Genocide.9521", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLGenocide9528, varVCLGenocide9529, varVCLGenocide95210;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.Genocide.9522
/////////////////////////////////////////////////////////

SynthDef.new("VCL.Genocide.9522", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLGenocide9528, varVCLGenocide9529, varVCLGenocide95210;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.Genocide.9523
/////////////////////////////////////////////////////////

SynthDef.new("VCL.Genocide.9523", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLGenocide9528, varVCLGenocide9529, varVCLGenocide95210;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.Genocide.9524
/////////////////////////////////////////////////////////

SynthDef.new("VCL.Genocide.9524", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLGenocide9528, varVCLGenocide9529, varVCLGenocide95210;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Wazzu.EZ
/////////////////////////////////////////////////////////

SynthDef.new("WM.Wazzu.EZ", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMWazzuEZ8, varWMWazzuEZ9, varWMWazzuEZ10, varWMWazzuEZ11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = Decimator.ar(gateEnv, 7.6137477763554, t_trig=0, 0.99997974699956, 0);
signal = LPCAnalyzer.ar(modY, gateEnv, bufnum=0, 184.47064019166, varWMWazzuEZ8, t_trig=0, modX, 0.99997971802576, 0);
modX = Convolution2L.ar(wave, gate=1, t_trig=0, bufnum=0, wave, SMS.ar(signal, y=0, PV_Mul.a), Resonz.ar(varWMWazzuEZ9, wave * modZ, modY, 0.99997223798152, 0), varWMWazzuEZ11, amp=0.25, varWMWazzuEZ9, x=0, varWMWazzuEZ9, FoaZoomZ.ar(modX, signal, signal, 0), signal, 0.99946369074314, 0), 0);
modY = PV_NoiseSynthF.a);
modZ = FoaFocusY.ar(y=0, wave, varWMWazzuEZ11, 0);
gateEnv = CircleRamp.ar(varWMWazzuEZ11, signal, 25.18719340764, varWMWazzuEZ11, SOMRd.ar(wave, wave, GVerb.ar(wave, GrainFM.ar(varWMWazzuEZ8, y=0, WrapSummer.ar(wave, x=0, 141.79898666398, z=0, y=0, wave), gate=1, varWMWazzuEZ10, wave, signal, modX, 345.08579018501, 0.9937001810834, 0), island=0, wave, signal, bufnum=0, 64.188785595528, wave, varWMWazzuEZ11, signal, 0.99325001304474, 0), signal, SOMRd.ar(varWMWazzuEZ11, amp=0.25, wave, 39.350795948376, Ringz.ar(varWMWazzuEZ9, wave, varWMWazzuEZ11, 0.99850641244226, 0))), StkPluck.ar(BHiShelf.ar(OSWrap8.ar(3253.2847742269, signal, wave), wave * modY, modZ, amp=0.25, 0.99447934584782, 0).exprange(1, SampleRate.ir);, wave, gateEnv, 0));
wave = RecordBuf.ar(278.81474210612, wave, modZ, env, Dxrand.a), gateEnv, varWMWazzuEZ8, modY, modZ);
varWMWazzuEZ8 = ArrayMax.ar(gate=1);
varWMWazzuEZ9 = RedLbyl.ar(island=0, varWMWazzuEZ11, 3087.5392406708);
varWMWazzuEZ10 = Gbman2DL.ar(varWMWazzuEZ11, wave, wave, x=0, 0.73439402001661, 0);
varWMWazzuEZ11 = BufRd.ar(varWMWazzuEZ8, y=0, signal, modY, wave);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Wazzu.EZ1
/////////////////////////////////////////////////////////

SynthDef.new("WM.Wazzu.EZ1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMWazzuEZ8, varWMWazzuEZ9, varWMWazzuEZ10, varWMWazzuEZ11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Wazzu.EZ2
/////////////////////////////////////////////////////////

SynthDef.new("WM.Wazzu.EZ2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMWazzuEZ8, varWMWazzuEZ9, varWMWazzuEZ10, varWMWazzuEZ11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Wazzu.EZ3
/////////////////////////////////////////////////////////

SynthDef.new("WM.Wazzu.EZ3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMWazzuEZ8, varWMWazzuEZ9, varWMWazzuEZ10, varWMWazzuEZ11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Wazzu.EZ4
/////////////////////////////////////////////////////////

SynthDef.new("WM.Wazzu.EZ4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMWazzuEZ8, varWMWazzuEZ9, varWMWazzuEZ10, varWMWazzuEZ11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// HLLP.Rock.8875
/////////////////////////////////////////////////////////

SynthDef.new("HLLP.Rock.8875", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHLLPRock88758, varHLLPRock88759, varHLLPRock887510;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = BPeakEQ.ar(wave, wave, wave, varHLLPRock88759, 0.99995043443054, 0);
signal = B2Ster.ar(42.663333341291, wave, varHLLPRock887510, 0.95517447579386, 0);
modX = RecordBuf.ar(CuspN.ar(wave * wave, island=0, gateEnv, LRHiCut.ar(wave, wave * wave, amp=0.25, wave), SOMAreaWr.a), 0), modZ, modY, MembraneHexagon.ar(y=0, t_trig=0, island=0, 0.99977846581712, 0), env, wave, amp=0.25, modX, varHLLPRock88759);
modY = Duty.ar(wave, 35.704614436022, 503.23785709187, varHLLPRock88758);
modZ = Fhn2DN.ar(x=0, varHLLPRock88758, TPV.ar(wave, wave, x=0, island=0, t_trig=0, wave, varHLLPRock88759, wave, 0.99042901746624, 0), varHLLPRock88759, wave, bufnum=0, wave, NLFiltC.ar(amp=0.25, FoaRotate.ar(env, 3443.0261206369, BufDelayL.ar(wave, varHLLPRock88758, modY, DoubleWell3.ar(wave, wave, amp=0.25, gate=1, wave, varHLLPRock887510, 0.99955720155416, 0), 0), 0), wave, amp=0.25, wave, wave, 0.95698800815292, 0), amp=0.25, Dpoll.a), 0);
gateEnv = LFBrownNoise2.ar(CQ_Diff.a).exprange(1, SampleRate.ir);, env, 899.36748469184, AudioControl.ar(152.03658965141), 0);
wave = BeatTrack2.a);
varHLLPRock88758 = AbstractIn.a);
varHLLPRock88759 = Clipper8.ar(wave, varHLLPRock88759, modZ);
varHLLPRock887510 = BufRateScale.a);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// HLLP.Rock.88751
/////////////////////////////////////////////////////////

SynthDef.new("HLLP.Rock.88751", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHLLPRock88758, varHLLPRock88759, varHLLPRock887510;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// HLLP.Rock.88752
/////////////////////////////////////////////////////////

SynthDef.new("HLLP.Rock.88752", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHLLPRock88758, varHLLPRock88759, varHLLPRock887510;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// HLLP.Rock.88753
/////////////////////////////////////////////////////////

SynthDef.new("HLLP.Rock.88753", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHLLPRock88758, varHLLPRock88759, varHLLPRock887510;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// HLLP.Rock.88754
/////////////////////////////////////////////////////////

SynthDef.new("HLLP.Rock.88754", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHLLPRock88758, varHLLPRock88759, varHLLPRock887510;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Darth
/////////////////////////////////////////////////////////

SynthDef.new("Darth", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDarth8, varDarth9, varDarth10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = ListTrig.a);
signal = Dser.a);
modX = FFTFluxPos.a);
modY = Rotate2.ar(Dseq.a), x=0, modX);
modZ = FreqShift.ar(x=0, wave * modZ, varDarth9, wave, 0);
gateEnv = ExpRand.a);
wave = RandID.a);
varDarth8 = PVInfo.ar(modY, modX, wave, 0.9816098853106, 0);
varDarth9 = LagUD.ar(70.3623229457, Pause.a), 18.711825217702, wave, 0);
varDarth10 = NTube.ar(amp=0.25, TwoZero.ar(y=0, gateEnv * varDarth10, wave, 0.99980891161386, 0), bufnum=0, modY, 0.96431729749731, 0);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Darth1
/////////////////////////////////////////////////////////

SynthDef.new("Darth1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDarth8, varDarth9, varDarth10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Darth2
/////////////////////////////////////////////////////////

SynthDef.new("Darth2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDarth8, varDarth9, varDarth10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Darth3
/////////////////////////////////////////////////////////

SynthDef.new("Darth3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDarth8, varDarth9, varDarth10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Darth4
/////////////////////////////////////////////////////////

SynthDef.new("Darth4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDarth8, varDarth9, varDarth10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.HLLP.Yelli
/////////////////////////////////////////////////////////

SynthDef.new("W32.HLLP.Yelli", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32HLLPYelli8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = LinExp.ar(modX, PV_LocalMax.a), gateEnv, varW32HLLPYelli8, wave);
signal = RosslerL.ar(Maxamp.ar(y=0, 1.6839844905637).exprange(1, SampleRate.ir);, modX, IndexL.ar(wave, gateEnv, 0.99750719688122, 0), wave, env, HPF.ar(x=0, Lag.ar(wave, t_trig=0, Dser.a), 0).exprange(1, SampleRate.ir);, FoaZoomZ.ar(582.15828755523, wave, 0.99973744222637, 0), 0), gate=1, modY, 0.92562793571872, Breakcore.ar(Lag3UD.ar(modZ, signal, WrapSummer.ar(x=0, AtsPartial.ar(gateEnv, t_trig=0, wave, 127.6240933766, island=0, wave, 0), modX, GVerb.ar(2817.8081219287, gateEnv, z=0, env, 18.854285389892, modZ, wave, island=0, modY, wave, wave, 0), bufnum=0, t_trig=0), 0.91596247511871, 0), wave, Spring.ar(island=0, y=0, gate=1), Klang.ar(wave, 84.268393285669, varW32HLLPYelli8), env));
modX = AtsNoise.ar(x=0, gateEnv, x=0, 0.97624861705515, 0);
modY = LFPar.ar(gateEnv, z=0, 0.34758411951178, 0);
modZ = DelayN.ar(y=0, t_trig=0, t_trig=0, modY, 0);
gateEnv = RunningSum.ar(wave, gate=1);
wave = StandardTrig.ar(env, t_trig=0, amp=0.25, wave, env, AtsFreq.ar(varW32HLLPYelli8, env, z=0, varW32HLLPYelli8, 0), 0);
varW32HLLPYelli8 = IRand.a);

signal = 8;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.HLLP.Yelli1
/////////////////////////////////////////////////////////

SynthDef.new("W32.HLLP.Yelli1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32HLLPYelli8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.HLLP.Yelli2
/////////////////////////////////////////////////////////

SynthDef.new("W32.HLLP.Yelli2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32HLLPYelli8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.HLLP.Yelli3
/////////////////////////////////////////////////////////

SynthDef.new("W32.HLLP.Yelli3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32HLLPYelli8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.HLLP.Yelli4
/////////////////////////////////////////////////////////

SynthDef.new("W32.HLLP.Yelli4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32HLLPYelli8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Nostyle.gen
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Nostyle.gen", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MNostylegen8, varW97MNostylegen9, varW97MNostylegen10, varW97MNostylegen11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = Compander.ar(varW97MNostylegen10, amp=0.25, island=0, env, modZ, modY, 271.68676217829, 0.99694810287924, Loudness.a));
signal = StkModalBar.ar(wave, Dbufrd.a), varW97MNostylegen10, wave, wave, bufnum=0, gateEnv, modZ, varW97MNostylegen10, 0.99890608398982, 0);
modX = PV_NoiseSynthP.a);
modY = SetBuf.a);
modZ = FFTCentroid.a);
gateEnv = Slew.ar(varW97MNostylegen10, varW97MNostylegen9, gateEnv, gateEnv, 0);
wave = PrintVal.a);
varW97MNostylegen8 = InFeedback.ar(varW97MNostylegen10, x=0);
varW97MNostylegen9 = Spring.ar(x=0, island=0, env);
varW97MNostylegen10 = TwoTube.ar(6.3095646734153, Poll.ar(wave, PV_BinScramble.a), modY, wave), varW97MNostylegen9, modX, PrintVal.a), 0.74072122941266, ListDUGen.a));
varW97MNostylegen11 = TGaussRand.ar(CrossoverDistortion.ar(modY, varW97MNostylegen11, env, 0.99993124640702, 0), wave, StkBandedWG.ar(wave, gateEnv, t_trig=0, x=0, env, 115.79921519851, varW97MNostylegen11, z=0, varW97MNostylegen8, 0.99958539527467, 0), Lag2UD.ar(FFTFlux.a), varW97MNostylegen10, modY, 0.99881390251288, 0), 0);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Nostyle.gen1
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Nostyle.gen1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MNostylegen8, varW97MNostylegen9, varW97MNostylegen10, varW97MNostylegen11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Nostyle.gen2
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Nostyle.gen2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MNostylegen8, varW97MNostylegen9, varW97MNostylegen10, varW97MNostylegen11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Nostyle.gen3
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Nostyle.gen3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MNostylegen8, varW97MNostylegen9, varW97MNostylegen10, varW97MNostylegen11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Nostyle.gen4
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Nostyle.gen4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MNostylegen8, varW97MNostylegen9, varW97MNostylegen10, varW97MNostylegen11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Wrone
/////////////////////////////////////////////////////////

SynthDef.new("W32.Wrone", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Wrone8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = SOMTrain.a);
signal = FFTFlux.a);
modX = MdaPiano.ar(BRZ2.ar(modX, Lag2.ar(amp=0.25, y=0, wave, 0), 0).exprange(1, SampleRate.ir);, bufnum=0, z=0, island=0, signal, env, modX, 2006.0461316548, WidthFirstUGen.a), wave, RHPF.ar(SoftClipAmp4.ar(modX, signal, 0.99991360832662, 0), modZ * varW32Wrone8, t_trig=0, 0.976356205018, 0), gateEnv, modY, t_trig=0, PV_BinBufRd.a), 0.46358433879479, FMGrainBF.ar(x=0, t_trig=0, gate=1, wave, BeatTrack2.a), gate=1, modZ, amp=0.25, y=0, wave, 0));
modY = HPF.ar(wave, varW32Wrone8, 0.97222336577881, 0);
modZ = FoaDominateX.ar(island=0, varW32Wrone8, 0.99991560247856, 0);
gateEnv = AbstractOut.a);
wave = AllpassC.ar(env, env, 29.037127782114, 65.701870774217, PV_Min.a), 0);
varW32Wrone8 = HPF.ar(modZ, modZ * modX, wave, 0);

signal = 8;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Wrone1
/////////////////////////////////////////////////////////

SynthDef.new("W32.Wrone1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Wrone8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Wrone2
/////////////////////////////////////////////////////////

SynthDef.new("W32.Wrone2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Wrone8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Wrone3
/////////////////////////////////////////////////////////

SynthDef.new("W32.Wrone3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Wrone8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Wrone4
/////////////////////////////////////////////////////////

SynthDef.new("W32.Wrone4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Wrone8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Heathen
/////////////////////////////////////////////////////////

SynthDef.new("W32.Heathen", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Heathen8, varW32Heathen9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = LPCAnalyzer.ar(wave, modX, modY, z=0, z=0, 1523.7177203291, varW32Heathen9, 0.99943225347013, 0);
signal = LFNoise1.ar(wave * wave, 0.73362606048987, 0);
modX = YigCliffordL.ar(wave * signal, Amplitude.ar(env, amp=0.25, modY, 0.99043983949903, 0), gate=1, gateEnv, wave, signal, signal, AmplitudeMod.ar(PV_Mul.a), BufGrainIBF.ar(varW32Heathen9, x=0, x=0, wave, 5087.5418898399, x=0, wave, modX, t_trig=0, wave, 18.587019753426, TextVU.ar(wave, env, env, modX, Delay2.ar(bufnum=0, 0.29728886075117, 0), z=0), modY, signal, 0), varW32Heathen8, 0.9999347765411, 0), 0);
modY = Select.ar(y=0, modZ);
modZ = OnsetsDS.a);
gateEnv = StkPluck.ar(YigCliffordC.ar(AtsUGen.a).exprange(1, SampleRate.ir);, gate=1, modX, wave, wave, modY, wave, PV_HainsworthFoote.ar(amp=0.25, island=0, x=0, 674.94451287598, modY), 0).exprange(1, SampleRate.ir);, gateEnv, 0.99898215447458, 0);
wave = VOSIM.ar(amp=0.25, wave * wave, env, wave, 0.99885560321076, 0);
varW32Heathen8 = PosRatio.ar(DelTapRd.ar(wave, signal, varW32Heathen8, t_trig=0, wave, 0), modY, modX);
varW32Heathen9 = Drand.a);

signal = 9;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Heathen1
/////////////////////////////////////////////////////////

SynthDef.new("W32.Heathen1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Heathen8, varW32Heathen9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Heathen2
/////////////////////////////////////////////////////////

SynthDef.new("W32.Heathen2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Heathen8, varW32Heathen9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Heathen3
/////////////////////////////////////////////////////////

SynthDef.new("W32.Heathen3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Heathen8, varW32Heathen9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W32.Heathen4
/////////////////////////////////////////////////////////

SynthDef.new("W32.Heathen4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW32Heathen8, varW32Heathen9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Aria.3076
/////////////////////////////////////////////////////////

SynthDef.new("Aria.3076", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varAria30768;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = AmpCompA.ar(WrapIndex.ar(modX, bufnum=0, 0.45890497535591, 0).exprange(1, SampleRate.ir);, 63.006369430059, FFTSubbandFlatness.a), t_trig=0);
signal = StkBeeThree.ar(wave * wave, 1566.6755179071, 189.62340111029, z=0, x=0, gate=1, LeakDC.ar(wave, 17.45109753289, 0.99984834523303, 0), 0.9952532534821, 0);
modX = Standard2DL.ar(varAria30768, gate=1, wave, modY, bufnum=0, wave, 0);
modY = BufAllpassC.ar(FMHEncode0.ar(modX, varAria30768, Latoocarfian2DN.ar(modY, gateEnv, y=0, 7.5057708716879, varAria30768, z=0, PV_MagGate.a), env, 0.99982148912795, 0), bufnum=0), wave, env, 34.291298511237, 0.93400004701702, OSFold4.ar(varAria30768, AtsNoiSynth.ar(modY, signal, 183.66151318156, z=0, env, x=0, wave, env, modZ, bufnum=0, signal, modX, 0.99994576449681, 0), amp=0.25));
modZ = FFTComplexDev.a);
gateEnv = KeyTrack.a);
wave = ListDUGen.a);
varAria30768 = RecordBuf.ar(signal, modZ, modZ, 1425.1109387864, varAria30768, 6.3879527402376, 11.185824369766, StkSaxofony.ar(varAria30768 * wave, gateEnv, 102.85598058348, Donce.a), amp=0.25, signal, amp=0.25, Balance2.ar(signal, modY, varAria30768, LPF.ar(wave, wave * env, modZ, 0)), wave, wave, 0), modZ);

signal = 8;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Aria.30761
/////////////////////////////////////////////////////////

SynthDef.new("Aria.30761", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varAria30768;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Aria.30762
/////////////////////////////////////////////////////////

SynthDef.new("Aria.30762", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varAria30768;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Aria.30763
/////////////////////////////////////////////////////////

SynthDef.new("Aria.30763", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varAria30768;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Aria.30764
/////////////////////////////////////////////////////////

SynthDef.new("Aria.30764", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varAria30768;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.Pearl
/////////////////////////////////////////////////////////

SynthDef.new("VCL.Pearl", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLPearl8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = Out.ar(bufnum=0, wave);
signal = Convolution2.ar(wave, 17.417955613711, AverageOutput.ar(x=0, z=0, wave, 0), modY, wave, 0);
modX = FFTPower.a);
modY = PV_CommonMul.a);
modZ = NumOutputBuses.a);
gateEnv = BufGrainBF.ar(BBandStop.ar(modX, varVCLPearl8 * wave, wave, 0.98520340513834, 0), t_trig=0, wave, wave, gateEnv, t_trig=0, signal, wave, modY, x=0, wave, 0);
wave = PinkNoise.ar(0.62956119655788, FFTPower.a));
varVCLPearl8 = KmeansToBPSet1.ar(wave * modX, modY, 76.858917291882, island=0, gateEnv, island=0, Hasher.ar(wave, 0.99961257348814, 0), wave, 0.99392912391133, 0);

signal = 8;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.Pearl1
/////////////////////////////////////////////////////////

SynthDef.new("VCL.Pearl1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLPearl8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.Pearl2
/////////////////////////////////////////////////////////

SynthDef.new("VCL.Pearl2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLPearl8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.Pearl3
/////////////////////////////////////////////////////////

SynthDef.new("VCL.Pearl3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLPearl8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// VCL.Pearl4
/////////////////////////////////////////////////////////

SynthDef.new("VCL.Pearl4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varVCLPearl8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Trivial.34g
/////////////////////////////////////////////////////////

SynthDef.new("Trivial.34g", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varTrivial34g8, varTrivial34g9, varTrivial34g10, varTrivial34g11, varTrivial34g12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = MFCC.a);
signal = FoaTilt.ar(wave, varTrivial34g10, wave, 0);
modX = Spreader.ar(AbstractIn.a), wave, modZ, wave, 0);
modY = Beep.ar(wave * wave, 34.760910150298);
modZ = AtsPartial.ar(QuadC.ar(wave, varTrivial34g8, t_trig=0, signal, modZ, varTrivial34g9, 0), gateEnv, varTrivial34g9, gate=1, wave, wave, 0);
gateEnv = StkFlute.ar(modZ * wave, modY, varTrivial34g12, y=0, AnalyseEvents2.ar(wave, 314.96406572636, LoopBuf.ar(wave, PV_RectComb.a), 262.60015326344, InGrainBBF.ar(wave, signal, 67.865914991765, 28.265901758951, wave, QuadN.ar(gateEnv, varTrivial34g8, varTrivial34g10, 3.1561127690938, wave, 0.035200623333319, 0), modY, gate=1, wave, 0), island=0, varTrivial34g9, island=0, varTrivial34g10), modX, signal, wave), 0);
wave = UnaryOpUGen.a);
varTrivial34g8 = AY.ar(wave, wave, LFCub.ar(PV_FreqBuffer.a).exprange(1, SampleRate.ir);, t_trig=0, varTrivial34g8, 0), wave, amp=0.25, 2269.9117367659, varTrivial34g11, x=0, 4.4972896618767, varTrivial34g8, wave, wave, Splay.ar(env, 166.11995508744, modX, 5693.5882845581, gateEnv));
varTrivial34g9 = HenonN.ar(Formlet.ar(varTrivial34g8, PureUGen.a).exprange(1, SampleRate.ir);, FMGrainIBF.ar(varTrivial34g12, modY, 6.3322066540705, wave, wave, island=0, gateEnv, t_trig=0, amp=0.25, amp=0.25, wave, wave, 0.99551530734791, 0), x=0, 0.99863444421808, 0).exprange(1, SampleRate.ir);, modX, island=0, varTrivial34g10, PV_MagFreeze.a), 0.99923031963117, 0);
varTrivial34g10 = ZeroCrossing.ar(gate=1);
varTrivial34g11 = Amplitude.ar(wave, DelayL.ar(CuspL.ar(PV_JensenAndersen.ar(y=0, gateEnv, StkFlute.ar(FMHEncode1.ar(x=0, z=0, signal, modX, Balance2.ar(island=0, wave, wave, modY), wave).exprange(1, SampleRate.ir);, varTrivial34g10, BLowShelf.ar(varTrivial34g9, wave * varTrivial34g8, 2.9497870943392, wave, Standard2DL.ar(modY, PV_MagSmear.a), modY, z=0, wave, wave, 0), 0), z=0, 0.39712051490325, 0), varTrivial34g12, 13.015814706169, bufnum=0, z=0).exprange(1, SampleRate.ir);, gateEnv, modX, wave, Slub.ar(amp=0.25, wave), Dgauss.a)), amp=0.25, t_trig=0, 0.99142988826124, 0), 462.3274416039, 0.99997380169112, 0);
varTrivial34g12 = Tumble.ar(gate=1, varTrivial34g10, modX, wave, bufnum=0);

signal = 2;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Trivial.34g1
/////////////////////////////////////////////////////////

SynthDef.new("Trivial.34g1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varTrivial34g8, varTrivial34g9, varTrivial34g10, varTrivial34g11, varTrivial34g12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Trivial.34g2
/////////////////////////////////////////////////////////

SynthDef.new("Trivial.34g2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varTrivial34g8, varTrivial34g9, varTrivial34g10, varTrivial34g11, varTrivial34g12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Trivial.34g3
/////////////////////////////////////////////////////////

SynthDef.new("Trivial.34g3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varTrivial34g8, varTrivial34g9, varTrivial34g10, varTrivial34g11, varTrivial34g12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Trivial.34g4
/////////////////////////////////////////////////////////

SynthDef.new("Trivial.34g4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varTrivial34g8, varTrivial34g9, varTrivial34g10, varTrivial34g11, varTrivial34g12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Hideous.B
/////////////////////////////////////////////////////////

SynthDef.new("Hideous.B", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHideousB8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = FMHDecode1.ar(wave, gate=1, gate=1, modZ, 8.544185127635, modX, amp=0.25, wave, bufnum=0, gate=1, y=0, RMShelf.ar(t_trig=0, modZ, wave, 0.98408178579508, 0), 0);
signal = BLowPass.ar(env, varHideousB8 * wave, env, FoaPressX.ar(Balance2.ar(t_trig=0, gateEnv, z=0, wave), bufnum=0, 0.99892096137633, IndexL.ar(modZ, wave, wave, 0)), GlitchRHPF.ar(modX, signal * wave, signal, wave, 0));
modX = Latch.ar(wave, gate=1);
modY = RosslerResL.ar(gateEnv, wave, signal * wave, t_trig=0, varHideousB8, wave, wave, wave, gate=1, x=0, 0.99923157044977, 0);
modZ = LFGauss.ar(9.4962276627089, bufnum=0, BufDur.a), amp=0.25, modY);
gateEnv = LFTri.ar(modY * wave, z=0, 0.99995671758737, 0);
wave = OSTrunc4.ar(modZ, wave);
varHideousB8 = LPF18.ar(modZ, PV_MagNoise.a).exprange(1, SampleRate.ir);, t_trig=0, PVSynth.ar(modY, t_trig=0, wave, gateEnv, Pokey.ar(varHideousB8, wave, bufnum=0, modY, modZ, 1238.7705080717, 233.69807564127, 2.4546962262817, x=0), env, t_trig=0, 0.99538762009617, 0));

signal = 8;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Hideous.B1
/////////////////////////////////////////////////////////

SynthDef.new("Hideous.B1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHideousB8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Hideous.B2
/////////////////////////////////////////////////////////

SynthDef.new("Hideous.B2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHideousB8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Hideous.B3
/////////////////////////////////////////////////////////

SynthDef.new("Hideous.B3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHideousB8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Hideous.B4
/////////////////////////////////////////////////////////

SynthDef.new("Hideous.B4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varHideousB8;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Dus.A
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Dus.A", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MDusA8, varW97MDusA9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = BufChannels.a);
signal = PV_CommonMag.a);
modX = OscN.ar(t_trig=0, modY, amp=0.25, 0.99995080164196, 0);
modY = TIRand.ar(modZ, wave, gateEnv);
modZ = OutputProxy.a);
gateEnv = LPCVals.ar(gate=1, signal);
wave = SineShaper.ar(4561.5594110329, Crest.a), 0.99969255952856, 0);
varW97MDusA8 = LFNoise1.ar(modX, 0.99989109640466, 0);
varW97MDusA9 = Dswitch.a);

signal = 9;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Dus.A1
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Dus.A1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MDusA8, varW97MDusA9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Dus.A2
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Dus.A2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MDusA8, varW97MDusA9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Dus.A3
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Dus.A3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MDusA8, varW97MDusA9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// W97M.Dus.A4
/////////////////////////////////////////////////////////

SynthDef.new("W97M.Dus.A4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varW97MDusA8, varW97MDusA9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Concept.Y
/////////////////////////////////////////////////////////

SynthDef.new("WM.Concept.Y", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMConceptY8, varWMConceptY9, varWMConceptY10, varWMConceptY11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = A2K.a);
signal = ScopeOut2.ar(wave, InGrainBF.ar(2.6571887360992, y=0, 2126.609219656, modX, t_trig=0, y=0, bufnum=0, 0.74412784847497, 0), modY, 1.6591590578091);
modX = GVerb.ar(varWMConceptY8, CuspN.ar(varWMConceptY11 * env, modX, gate=1, varWMConceptY10, wave, 0), y=0, wave, modX, TBetaRand.ar(t_trig=0, varWMConceptY10, varWMConceptY11, varWMConceptY9, varWMConceptY10, 0.38207586406247, 0), env, LFDClipNoise.ar(PV_NoiseSynthP.a).exprange(1, SampleRate.ir);, wave, 0), y=0, gateEnv, DoubleWell3.ar(BFPanner.a), wave, modY, signal, wave, PV_NoiseSynthF.a), 0.97429441163736, 0), 0);
modY = CQ_Diff.a);
modZ = SOMTrain.a);
gateEnv = WrapIndex.ar(gate=1, y=0, 0.99513958181842, 0);
wave = UHJ2B.ar(wave, modZ);
varWMConceptY8 = NumRunningSynths.a);
varWMConceptY9 = DriveNoise.ar(FoaDominateZ.ar(FFTSubbandFlux.a), StkFlute.ar(wave, 3717.6394373229, varWMConceptY9, Dibrown.a), GrainBuf.ar(modZ, varWMConceptY11, env, modY, modX, wave, bufnum=0, wave, gate=1, varWMConceptY9, 0.99996421257111, 0), 0), 0.99983516448391, 0), signal, x=0);
varWMConceptY10 = SinGrainBF.ar(bufnum=0, z=0, wave * wave, RosslerL.ar(MZPokey.ar(modY, x=0, t_trig=0, modZ, z=0, varWMConceptY11, modX, varWMConceptY11, 63.424800955429).exprange(1, SampleRate.ir);, z=0, wave, wave, wave, gate=1, gate=1, z=0, wave, 0), modY, gateEnv, varWMConceptY9, LPZ2.ar(wave, wave, 0), 0);
varWMConceptY11 = DriveNoise.ar(FFTSubbandPower.a), x=0, env);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Concept.Y1
/////////////////////////////////////////////////////////

SynthDef.new("WM.Concept.Y1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMConceptY8, varWMConceptY9, varWMConceptY10, varWMConceptY11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Concept.Y2
/////////////////////////////////////////////////////////

SynthDef.new("WM.Concept.Y2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMConceptY8, varWMConceptY9, varWMConceptY10, varWMConceptY11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Concept.Y3
/////////////////////////////////////////////////////////

SynthDef.new("WM.Concept.Y3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMConceptY8, varWMConceptY9, varWMConceptY10, varWMConceptY11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Concept.Y4
/////////////////////////////////////////////////////////

SynthDef.new("WM.Concept.Y4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMConceptY8, varWMConceptY9, varWMConceptY10, varWMConceptY11;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Appder.V
/////////////////////////////////////////////////////////

SynthDef.new("WM.Appder.V", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMAppderV8, varWMAppderV9, varWMAppderV10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = Duty.ar(x=0, modX, wave, bufnum=0);
signal = PV_SpectralEnhance.a);
modX = PV_MagSmear.a);
modY = VBAP.ar(wave, wave, modY, island=0, 1295.2183594412, wave);
modZ = FoaTilt.ar(varWMAppderV10, y=0, 0.99978017915481, 0);
gateEnv = OscN.ar(gate=1, wave * wave, varWMAppderV10, 0.99991926146043, 0);
wave = PV_PartialSynthP.a);
varWMAppderV8 = FoaTumble.ar(env, 60.578999744227, 0.99380983457905, 0);
varWMAppderV9 = PV_MagNoise.a);
varWMAppderV10 = Klank.ar(modX, Gendy1.ar(varWMAppderV9, t_trig=0, varWMAppderV8, varWMAppderV10, varWMAppderV8, bufnum=0, gateEnv, 414.71692187684, Linen.a), varWMAppderV10, CombFormlet.ar(island=0, wave, FoaPushZ.ar(77.449640856209, modY, wave, 0), modX, MZPokey.ar(wave, wave, 3.3520355358596, modZ, wave, 3662.4170076267, 16.3098073136, wave, 131.35878201379), 0, bufnum=0), 0), 493.93684636864, z=0, modY);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Appder.V1
/////////////////////////////////////////////////////////

SynthDef.new("WM.Appder.V1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMAppderV8, varWMAppderV9, varWMAppderV10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Appder.V2
/////////////////////////////////////////////////////////

SynthDef.new("WM.Appder.V2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMAppderV8, varWMAppderV9, varWMAppderV10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Appder.V3
/////////////////////////////////////////////////////////

SynthDef.new("WM.Appder.V3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMAppderV8, varWMAppderV9, varWMAppderV10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Appder.V4
/////////////////////////////////////////////////////////

SynthDef.new("WM.Appder.V4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMAppderV8, varWMAppderV9, varWMAppderV10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sysex.384
/////////////////////////////////////////////////////////

SynthDef.new("Sysex.384", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSysex3848, varSysex3849, varSysex38410, varSysex38411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = PV_MagBelow.a);
signal = Diwhite.a);
modX = SyncSaw.ar(modZ, island=0, 0.99995674324876, 0);
modY = PrintVal.a);
modZ = MultiOutUGen.a);
gateEnv = FMGrainB.ar(env, amp=0.25, RMShelf.ar(CombLP.ar(z=0, varSysex38411, x=0, bufnum=0, modX, wave, Crackle.ar(varSysex38411, 0.99560424049541, OneZero.ar(x=0, BinaryOpUGen.a), signal, 0)), 0), wave * wave, varSysex3848, wave, 0), modX, wave, varSysex3849, StkVoicForm.ar(HPZ1.ar(signal, wave, 0).exprange(1, SampleRate.ir);, wave, y=0, varSysex3849, bufnum=0, PeakEQ2.ar(env, modX, modX, x=0), CQ_Diff.a), Tartini.a), 0), 0);
wave = BufGrainBF.ar(wave, amp=0.25, z=0, bufnum=0, varSysex38411, t_trig=0, wave, varSysex3849, signal, varSysex38411, LFBrownNoise1.ar(varSysex3849, modX, wave, 0.99998105748479, 0), 0);
varSysex3848 = GbmanL.ar(modX * modZ, wave, island=0, wave, 0);
varSysex3849 = Lag2UD.ar(bufnum=0, gateEnv, wave, Cepstrum.a), UnaryOpUGen.a));
varSysex38410 = Ball.ar(modX, modY, amp=0.25, modX);
varSysex38411 = PV_NoiseSynthP.a);

signal = 1;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sysex.3841
/////////////////////////////////////////////////////////

SynthDef.new("Sysex.3841", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSysex3848, varSysex3849, varSysex38410, varSysex38411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sysex.3842
/////////////////////////////////////////////////////////

SynthDef.new("Sysex.3842", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSysex3848, varSysex3849, varSysex38410, varSysex38411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sysex.3843
/////////////////////////////////////////////////////////

SynthDef.new("Sysex.3843", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSysex3848, varSysex3849, varSysex38410, varSysex38411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Sysex.3844
/////////////////////////////////////////////////////////

SynthDef.new("Sysex.3844", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSysex3848, varSysex3849, varSysex38410, varSysex38411;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Offender.1000
/////////////////////////////////////////////////////////

SynthDef.new("Offender.1000", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varOffender10008, varOffender10009, varOffender100010, varOffender100011, varOffender100012;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = BufWr.ar(Dxrand.a), 580.61704432507, x=0, 613.34616421968);
signal = SyncSaw.ar(5390.601073305, island=0, 0.9984781941856, 0);
modX = SawDPW.ar(wave * wave, t_trig=0, wave, 0);
modY = Delay2.ar(wave, NLFiltN.ar(modY, 374.55684553152, x=0, wave, x=0, bufnum=0, signal, 0), 0);
modZ = RedDPCMdecode.ar(AnalyseEvents2.ar(x=0, env, modY, t_trig=0, wave, 783.4593500621));
gateEnv = CuspN.ar(varOffender100012 * wave, modZ, wave, varOffender100012, 0.99982688333067, 0);
wave = SetBuf.a);
varOffender10008 = Pulse.ar(modY * wave, TwoTube.ar(varOffender10009, wave, DetectIndex.ar(modY, varOffender100011, 0.46930340844936, 0), varOffender100012, varOffender10009, signal, 0), 0.999959488702, 0);
varOffender10009 = Slew.ar(FoaPushY.ar(AmpComp.ar(wave, varOffender10008, varOffender100011), island=0, 0.66718413747516, 0), MembraneCircle.ar(bufnum=0, signal, modX, 0.99995532522264, 0), 16.26437121626, 0.99710016835748, 0);
varOffender100010 = Tumble.ar(varOffender10008, gate=1, bufnum=0, env, x=0);
varOffender100011 = Pokey.ar(wave, 161.03870884623, ListTrig2.a), varOffender100012, gateEnv, signal, varOffender100010, z=0, wave);
varOffender100012 = PV_FreqBuffer.a);

signal = 2;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Offender.10001
/////////////////////////////////////////////////////////

SynthDef.new("Offender.10001", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varOffender10008, varOffender10009, varOffender100010, varOffender100011, varOffender100012;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Offender.10002
/////////////////////////////////////////////////////////

SynthDef.new("Offender.10002", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varOffender10008, varOffender10009, varOffender100010, varOffender100011, varOffender100012;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Offender.10003
/////////////////////////////////////////////////////////

SynthDef.new("Offender.10003", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varOffender10008, varOffender10009, varOffender100010, varOffender100011, varOffender100012;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Offender.10004
/////////////////////////////////////////////////////////

SynthDef.new("Offender.10004", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varOffender10008, varOffender10009, varOffender100010, varOffender100011, varOffender100012;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Doubleheart.452.B
/////////////////////////////////////////////////////////

SynthDef.new("Doubleheart.452.B", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDoubleheart452B8, varDoubleheart452B9, varDoubleheart452B10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = Squiz.ar(7.1736917047783, wave, varDoubleheart452B9, modY, Saw.ar(wave * wave, 0.99984263185051, 0), 0);
signal = DbufTag.a);
modX = FoaAsymmetry.ar(FreeVerb.ar(FoaDirectX.ar(91.06276766373, bufnum=0, 0.98264772692259, 0), amp=0.25, varDoubleheart452B8, signal, gateEnv, PulseDivider.ar(TWindex.ar(gate=1, wave, modZ), modX, amp=0.25)), AnalyseEvents2.ar(bufnum=0, varDoubleheart452B10, z=0, signal, y=0, wave), 0.99977851757398, 0);
modY = OffsetOut.ar(y=0, bufnum=0);
modZ = WeaklyNonlinear.ar(wave, modX, gateEnv, wave, TrigAvg.a).exprange(1, SampleRate.ir);, signal, wave, CrossoverDistortion.ar(island=0, modZ, island=0, wave, 0), 369.11361564858, signal, varDoubleheart452B10, 0.80136877226546, 0);
gateEnv = PanX2D.ar(85.212776610215, modZ, amp=0.25, varDoubleheart452B10, wave, 284.51267346611, 184.94220151772, 1.1788372542743);
wave = MeanTriggered.ar(gate=1, StkBandedWG.ar(modX, gateEnv, t_trig=0, gate=1, wave, varDoubleheart452B8, z=0, amp=0.25, amp=0.25, wave, 0), varDoubleheart452B9, 0.8592920374788, 0);
varDoubleheart452B8 = PackFFT.a);
varDoubleheart452B9 = StkShakers.ar(gateEnv, Goertzel.a), LocalIn.ar(y=0, gateEnv), modY, 4.0668420509601, wave, 0);
varDoubleheart452B10 = MulAdd.a);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Doubleheart.452.B1
/////////////////////////////////////////////////////////

SynthDef.new("Doubleheart.452.B1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDoubleheart452B8, varDoubleheart452B9, varDoubleheart452B10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Doubleheart.452.B2
/////////////////////////////////////////////////////////

SynthDef.new("Doubleheart.452.B2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDoubleheart452B8, varDoubleheart452B9, varDoubleheart452B10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Doubleheart.452.B3
/////////////////////////////////////////////////////////

SynthDef.new("Doubleheart.452.B3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDoubleheart452B8, varDoubleheart452B9, varDoubleheart452B10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Doubleheart.452.B4
/////////////////////////////////////////////////////////

SynthDef.new("Doubleheart.452.B4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDoubleheart452B8, varDoubleheart452B9, varDoubleheart452B10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Dutch
/////////////////////////////////////////////////////////

SynthDef.new("Dutch", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDutch8, varDutch9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = JoshGrain.a);
signal = ListTrig.a);
modX = Phasor.ar(amp=0.25, 460.54096524941, wave, 87.882451492675, env);
modY = Trig.ar(varDutch8, varDutch9);
modZ = PV_JensenAndersen.ar(wave, gate=1, z=0, modZ, bufnum=0, amp=0.25, modY);
gateEnv = Changed.ar(amp=0.25, gate=1);
wave = Concat.ar(wave, wave, wave, env, bufnum=0, wave, signal, wave, Tap.ar(varDutch9, wave, gateEnv), SendPeakRMS.ar(Lag3.ar(modY, varDutch8, 0.99997155169994, 0), wave, y=0, t_trig=0, wave), gateEnv, signal, signal, 0);
varDutch8 = Astrocade.ar(y=0, LFDNoise0.ar(env * wave, 0.99977188218929, 0), modZ, z=0, env, gateEnv, signal, wave);
varDutch9 = LFDNoise3.ar(wave * wave, wave, 0);

signal = 9;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Dutch1
/////////////////////////////////////////////////////////

SynthDef.new("Dutch1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDutch8, varDutch9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Dutch2
/////////////////////////////////////////////////////////

SynthDef.new("Dutch2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDutch8, varDutch9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Dutch3
/////////////////////////////////////////////////////////

SynthDef.new("Dutch3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDutch8, varDutch9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Dutch4
/////////////////////////////////////////////////////////

SynthDef.new("Dutch4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varDutch8, varDutch9;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Simulate
/////////////////////////////////////////////////////////

SynthDef.new("Simulate", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSimulate8, varSimulate9, varSimulate10, varSimulate11, varSimulate12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = PV_BinScramble.a);
signal = AmpComp.ar(env * wave, gate=1, y=0);
modX = BufDelayN.ar(bufnum=0, wave, wave, 0.99998997126227, 0);
modY = FoaDirectZ.ar(wave, 4405.6845844559, 0.97896257961211, 0);
modZ = BufRd.ar(modY, z=0, varSimulate10, x=0, Tap.ar(x=0, varSimulate11, wave));
gateEnv = BRF.ar(signal, modX, signal, 0.80792482640248, 0);
wave = ScopeOut2.ar(t_trig=0, modY, t_trig=0, varSimulate8);
varSimulate8 = A2K.a);
varSimulate9 = Dust2.ar(varSimulate12, 0.99561258552495, 0);
varSimulate10 = SetResetFF.ar(96.091167929006, x=0);
varSimulate11 = OSTrunc8.ar(wave, bufnum=0);
varSimulate12 = DoubleWell.ar(env, CheckBadValues.ar(wave, wave, x=0), env, wave, wave, 32.213702540239, amp=0.25, varSimulate12, 0.98963873016697, 0);

signal = 2;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Simulate1
/////////////////////////////////////////////////////////

SynthDef.new("Simulate1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSimulate8, varSimulate9, varSimulate10, varSimulate11, varSimulate12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Simulate2
/////////////////////////////////////////////////////////

SynthDef.new("Simulate2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSimulate8, varSimulate9, varSimulate10, varSimulate11, varSimulate12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Simulate3
/////////////////////////////////////////////////////////

SynthDef.new("Simulate3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSimulate8, varSimulate9, varSimulate10, varSimulate11, varSimulate12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Simulate4
/////////////////////////////////////////////////////////

SynthDef.new("Simulate4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varSimulate8, varSimulate9, varSimulate10, varSimulate11, varSimulate12;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Four.A
/////////////////////////////////////////////////////////

SynthDef.new("WM.Four.A", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMFourA8, varWMFourA9, varWMFourA10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = FMGrainB.ar(PlayBuf.ar(55.76220718996, 10.936760234248, 121.80110016795, y=0, x=0, modY, varWMFourA8), 99.960293067427, 15.206885860483, z=0, ToggleFF.ar(wave), varWMFourA9, wave, 0);
signal = COsc.ar(Dreset.a), wave, varWMFourA8, StkMoog.ar(varWMFourA9 * wave, signal, 23.522399577877, y=0, gate=1, modX, y=0, PulseCount.ar(VOsc3.ar(gate=1, t_trig=0, amp=0.25, wave, FreeVerb2.ar(bufnum=0, island=0, wave, wave, 838.47593515941, varWMFourA10, FoaDominateY.ar(x=0, x=0, varWMFourA10, Balance2.ar(54.30841681708, z=0, wave, y=0))), 0), modY), 0), 0);
modX = SubsampleOffset.a);
modY = LatoocarfianL.ar(varWMFourA10 * signal, wave, DelayN.ar(wave, wave, FFTCentroid.a), 0.10398251543107, PV_MagSquared.a)), modZ, wave, varWMFourA8, t_trig=0, PeakEQ2.ar(wave, wave * varWMFourA9, gateEnv, A2K.a)), 0);
modZ = FoaPanB.ar(LFGauss.ar(varWMFourA10, modY, wave, varWMFourA10, t_trig=0), signal, gate=1, wave, 0);
gateEnv = LFNoise1.ar(LatoocarfianN.ar(wave * wave, z=0, gateEnv, island=0, 3410.8233145236, varWMFourA8, gate=1, InsideOut.ar(island=0, NumInputBuses.a), 0), 0).exprange(1, SampleRate.ir);, signal, 0);
wave = WaveTerrain.ar(64.831044997268, gate=1, wave, modY, PV_FreqBuffer.a), 0.99599237402543, Lag2UD.ar(StkShakers.ar(t_trig=0, modZ, amp=0.25, gate=1, modY, wave, 0), gate=1, varWMFourA9, varWMFourA9, 0));
varWMFourA8 = PulseDivider.ar(modX, signal, varWMFourA8);
varWMFourA9 = Clockmus.a);
varWMFourA10 = WarpZ.ar(modX, UnaryOpUGen.a), modZ, varWMFourA9, y=0, wave, wave, bufnum=0, wave, TDelay.ar(gateEnv, y=0), bufnum=0, BFManipulate.ar(x=0, modX, varWMFourA9, wave, modX, 406.7801193056, gate=1), 0);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Four.A1
/////////////////////////////////////////////////////////

SynthDef.new("WM.Four.A1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMFourA8, varWMFourA9, varWMFourA10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Four.A2
/////////////////////////////////////////////////////////

SynthDef.new("WM.Four.A2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMFourA8, varWMFourA9, varWMFourA10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Four.A3
/////////////////////////////////////////////////////////

SynthDef.new("WM.Four.A3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMFourA8, varWMFourA9, varWMFourA10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// WM.Four.A4
/////////////////////////////////////////////////////////

SynthDef.new("WM.Four.A4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varWMFourA8, varWMFourA9, varWMFourA10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Bin.Auto.COU
/////////////////////////////////////////////////////////

SynthDef.new("Bin.Auto.COU", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBinAutoCOU8, varBinAutoCOU9, varBinAutoCOU10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Generated prototype body code
env = Clipper4.ar(38.191890075921, 1357.9224766881, InGrainI.ar(wave, wave, wave, gateEnv, amp=0.25, x=0, gateEnv, 0));
signal = Instruction.ar(modY, 0.99998972737337, 0);
modX = FoaTilt.ar(t_trig=0, bufnum=0, OneZero.ar(Ringz.ar(island=0, wave * wave, wave, 0.99889553963013, 0), bufnum=0, LPZ2.ar(varBinAutoCOU9, 0.95038752473772, 0), 0), 0);
modY = Streson.ar(modX, island=0, wave, Decay.ar(4.0204491846558, varBinAutoCOU10, FoaProximity.ar(gate=1, 343.68418077866, 0.99553900300574, 0), 0), 0);
modZ = BufDur.a);
gateEnv = PV_BinPlayBuf.a);
wave = LinCongC.ar(wave, varBinAutoCOU8, Concat2.ar(env, modZ, wave, island=0, bufnum=0, modY, wave, modX, y=0, wave, varBinAutoCOU8, wave, wave, 0.99988644408891, 0), 5044.4040630351, BeatTrack2.a), 0.99985106100042, 0);
varBinAutoCOU8 = PV_Cutoff.a);
varBinAutoCOU9 = ScopeOut.ar(5.1441440417575, modZ);
varBinAutoCOU10 = TrigAvg.a);

signal = 0;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Bin.Auto.COU1
/////////////////////////////////////////////////////////

SynthDef.new("Bin.Auto.COU1", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBinAutoCOU8, varBinAutoCOU9, varBinAutoCOU10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Bin.Auto.COU2
/////////////////////////////////////////////////////////

SynthDef.new("Bin.Auto.COU2", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBinAutoCOU8, varBinAutoCOU9, varBinAutoCOU10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Bin.Auto.COU3
/////////////////////////////////////////////////////////

SynthDef.new("Bin.Auto.COU3", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBinAutoCOU8, varBinAutoCOU9, varBinAutoCOU10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




/////////////////////////////////////////////////////////
// Bin.Auto.COU4
/////////////////////////////////////////////////////////

SynthDef.new("Bin.Auto.COU4", {
arg amp=0.25, x=0, y=0, z=0, island=0, gate=1, t_trig=0, bufnum=0;
var env, signal, modX, modY, modZ, gateEnv, wave, varBinAutoCOU8, varBinAutoCOU9, varBinAutoCOU10;

gateEnv = EnvGen.ar(Env.asr(0, 1, 0.001, -4), gate:gate, doneAction:2);
			modX = x / 430;
			modY = y.linlin(-200, 200, 0, 0.999);
			modZ = z / 430;
			env = EnvGen.ar(Env.new([0, 1, 0],[0.0001, 0.05], -4), gate:t_trig, doneAction:0);

			// in = InFeedback.ar(80 + (island * 2), 2);
			wave = WaveTerrain.ar(
			    bufnum,
			    env.linlin(0, 1, [modX * 72, modZ * 72], modY * 72),
			    env.linlin(0, 1, [modZ * 72, modX * 72], modY * 72),
			    72,
			    72
			) * env;
// Variation test code

signal = wave;
signal = SanityCheck2.ar(signal);
			Out.ar(50, Limiter.ar(LeakDC.ar(signal) * amp * gateEnv, 1, 0.001));
}).store.writeDefFile("/home/octopian/Documents/source/QtDev/Shoggoth/resources/");




